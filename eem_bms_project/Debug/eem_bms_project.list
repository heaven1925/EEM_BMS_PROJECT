
eem_bms_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08005f24  08005f24  00015f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006038  08006038  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006040  08006040  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006040  08006040  00016040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006044  08006044  00016044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08006048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000100  08006148  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08006148  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a42f  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033a0  00000000  00000000  0003a55f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0003d900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003ed78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027026  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8f9  00000000  00000000  000670e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef8c4  00000000  00000000  000829df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001722a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf8  00000000  00000000  001722f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000100 	.word	0x20000100
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005f0c 	.word	0x08005f0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000104 	.word	0x20000104
 800020c:	08005f0c 	.word	0x08005f0c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fe6e 	bl	8001298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f812 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 fa6e 	bl	8000aa0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c4:	f000 f87e 	bl	80006c4 <MX_ADC1_Init>
  MX_CAN1_Init();
 80005c8:	f000 f916 	bl	80007f8 <MX_CAN1_Init>
  MX_I2C2_Init();
 80005cc:	f000 f94a 	bl	8000864 <MX_I2C2_Init>
  MX_RTC_Init();
 80005d0:	f000 f976 	bl	80008c0 <MX_RTC_Init>
  MX_TIM1_Init();
 80005d4:	f000 f99a 	bl	800090c <MX_TIM1_Init>
  MX_UART5_Init();
 80005d8:	f000 fa38 	bl	8000a4c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /* JUMP INTO MAIN BMS CODE */
  App_MAIN();
 80005dc:	f004 fd14 	bl	8005008 <App_MAIN>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <main+0x2c>
	...

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2234      	movs	r2, #52	; 0x34
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f005 f824 	bl	8005640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <SystemClock_Config+0xd8>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a2a      	ldr	r2, [pc, #168]	; (80006bc <SystemClock_Config+0xd8>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <SystemClock_Config+0xd8>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <SystemClock_Config+0xdc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000630:	4a23      	ldr	r2, [pc, #140]	; (80006c0 <SystemClock_Config+0xdc>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <SystemClock_Config+0xdc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000644:	230a      	movs	r3, #10
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000660:	2308      	movs	r3, #8
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000664:	2354      	movs	r3, #84	; 0x54
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800066c:	2302      	movs	r3, #2
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4618      	mov	r0, r3
 800067a:	f002 ff73 	bl	8003564 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000684:	f000 fb06 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	2102      	movs	r1, #2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 f96f 	bl	8002988 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006b0:	f000 faf0 	bl	8000c94 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	; 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	463b      	mov	r3, r7
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d6:	4b45      	ldr	r3, [pc, #276]	; (80007ec <MX_ADC1_Init+0x128>)
 80006d8:	4a45      	ldr	r2, [pc, #276]	; (80007f0 <MX_ADC1_Init+0x12c>)
 80006da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006dc:	4b43      	ldr	r3, [pc, #268]	; (80007ec <MX_ADC1_Init+0x128>)
 80006de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e4:	4b41      	ldr	r3, [pc, #260]	; (80007ec <MX_ADC1_Init+0x128>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006ea:	4b40      	ldr	r3, [pc, #256]	; (80007ec <MX_ADC1_Init+0x128>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006f0:	4b3e      	ldr	r3, [pc, #248]	; (80007ec <MX_ADC1_Init+0x128>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f6:	4b3d      	ldr	r3, [pc, #244]	; (80007ec <MX_ADC1_Init+0x128>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fe:	4b3b      	ldr	r3, [pc, #236]	; (80007ec <MX_ADC1_Init+0x128>)
 8000700:	2200      	movs	r2, #0
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000704:	4b39      	ldr	r3, [pc, #228]	; (80007ec <MX_ADC1_Init+0x128>)
 8000706:	4a3b      	ldr	r2, [pc, #236]	; (80007f4 <MX_ADC1_Init+0x130>)
 8000708:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070a:	4b38      	ldr	r3, [pc, #224]	; (80007ec <MX_ADC1_Init+0x128>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000710:	4b36      	ldr	r3, [pc, #216]	; (80007ec <MX_ADC1_Init+0x128>)
 8000712:	2206      	movs	r2, #6
 8000714:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000716:	4b35      	ldr	r3, [pc, #212]	; (80007ec <MX_ADC1_Init+0x128>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071e:	4b33      	ldr	r3, [pc, #204]	; (80007ec <MX_ADC1_Init+0x128>)
 8000720:	2201      	movs	r2, #1
 8000722:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000724:	4831      	ldr	r0, [pc, #196]	; (80007ec <MX_ADC1_Init+0x128>)
 8000726:	f000 fe4d 	bl	80013c4 <HAL_ADC_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000730:	f000 fab0 	bl	8000c94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000734:	2300      	movs	r3, #0
 8000736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000738:	2301      	movs	r3, #1
 800073a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800073c:	2307      	movs	r3, #7
 800073e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	4829      	ldr	r0, [pc, #164]	; (80007ec <MX_ADC1_Init+0x128>)
 8000746:	f000 fe81 	bl	800144c <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000750:	f000 faa0 	bl	8000c94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000754:	2301      	movs	r3, #1
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4822      	ldr	r0, [pc, #136]	; (80007ec <MX_ADC1_Init+0x128>)
 8000762:	f000 fe73 	bl	800144c <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800076c:	f000 fa92 	bl	8000c94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000770:	2302      	movs	r3, #2
 8000772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000774:	2303      	movs	r3, #3
 8000776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	481b      	ldr	r0, [pc, #108]	; (80007ec <MX_ADC1_Init+0x128>)
 800077e:	f000 fe65 	bl	800144c <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000788:	f000 fa84 	bl	8000c94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800078c:	2303      	movs	r3, #3
 800078e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4814      	ldr	r0, [pc, #80]	; (80007ec <MX_ADC1_Init+0x128>)
 800079a:	f000 fe57 	bl	800144c <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80007a4:	f000 fa76 	bl	8000c94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80007a8:	2312      	movs	r3, #18
 80007aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80007ac:	2305      	movs	r3, #5
 80007ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80007b0:	2302      	movs	r3, #2
 80007b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b4:	463b      	mov	r3, r7
 80007b6:	4619      	mov	r1, r3
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <MX_ADC1_Init+0x128>)
 80007ba:	f000 fe47 	bl	800144c <HAL_ADC_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80007c4:	f000 fa66 	bl	8000c94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80007c8:	2311      	movs	r3, #17
 80007ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80007cc:	2306      	movs	r3, #6
 80007ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_ADC1_Init+0x128>)
 80007d6:	f000 fe39 	bl	800144c <HAL_ADC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80007e0:	f000 fa58 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000011c 	.word	0x2000011c
 80007f0:	40012000 	.word	0x40012000
 80007f4:	0f000001 	.word	0x0f000001

080007f8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_CAN1_Init+0x64>)
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <MX_CAN1_Init+0x68>)
 8000800:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_CAN1_Init+0x64>)
 8000804:	220c      	movs	r2, #12
 8000806:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_CAN1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_CAN1_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_CAN1_Init+0x64>)
 8000816:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800081a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_CAN1_Init+0x64>)
 800081e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000822:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <MX_CAN1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_CAN1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_CAN1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_CAN1_Init+0x64>)
 8000838:	2201      	movs	r2, #1
 800083a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_CAN1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_CAN1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_CAN1_Init+0x64>)
 800084a:	f001 f82d 	bl	80018a8 <HAL_CAN_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000854:	f000 fa1e 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000164 	.word	0x20000164
 8000860:	40006400 	.word	0x40006400

08000864 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_I2C2_Init+0x50>)
 800086a:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <MX_I2C2_Init+0x54>)
 800086c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_I2C2_Init+0x50>)
 8000870:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_I2C2_Init+0x58>)
 8000872:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_I2C2_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_I2C2_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_I2C2_Init+0x50>)
 8000882:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000886:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_I2C2_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_I2C2_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_I2C2_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_I2C2_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_I2C2_Init+0x50>)
 80008a2:	f001 ff2d 	bl	8002700 <HAL_I2C_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008ac:	f000 f9f2 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000018c 	.word	0x2000018c
 80008b8:	40005800 	.word	0x40005800
 80008bc:	000186a0 	.word	0x000186a0

080008c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_RTC_Init+0x44>)
 80008c6:	4a10      	ldr	r2, [pc, #64]	; (8000908 <MX_RTC_Init+0x48>)
 80008c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_RTC_Init+0x44>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_RTC_Init+0x44>)
 80008d2:	227f      	movs	r2, #127	; 0x7f
 80008d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_RTC_Init+0x44>)
 80008d8:	22ff      	movs	r2, #255	; 0xff
 80008da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_RTC_Init+0x44>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_RTC_Init+0x44>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_RTC_Init+0x44>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_RTC_Init+0x44>)
 80008f0:	f003 f8d6 	bl	8003aa0 <HAL_RTC_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80008fa:	f000 f9cb 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200001e0 	.word	0x200001e0
 8000908:	40002800 	.word	0x40002800

0800090c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b096      	sub	sp, #88	; 0x58
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2220      	movs	r2, #32
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f004 fe7b 	bl	8005640 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800094a:	4b3e      	ldr	r3, [pc, #248]	; (8000a44 <MX_TIM1_Init+0x138>)
 800094c:	4a3e      	ldr	r2, [pc, #248]	; (8000a48 <MX_TIM1_Init+0x13c>)
 800094e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 8000950:	4b3c      	ldr	r3, [pc, #240]	; (8000a44 <MX_TIM1_Init+0x138>)
 8000952:	2205      	movs	r2, #5
 8000954:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b3b      	ldr	r3, [pc, #236]	; (8000a44 <MX_TIM1_Init+0x138>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8399;
 800095c:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <MX_TIM1_Init+0x138>)
 800095e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000962:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <MX_TIM1_Init+0x138>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800096a:	4b36      	ldr	r3, [pc, #216]	; (8000a44 <MX_TIM1_Init+0x138>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <MX_TIM1_Init+0x138>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000976:	4833      	ldr	r0, [pc, #204]	; (8000a44 <MX_TIM1_Init+0x138>)
 8000978:	f003 f98c 	bl	8003c94 <HAL_TIM_Base_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000982:	f000 f987 	bl	8000c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800098c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000990:	4619      	mov	r1, r3
 8000992:	482c      	ldr	r0, [pc, #176]	; (8000a44 <MX_TIM1_Init+0x138>)
 8000994:	f003 fa82 	bl	8003e9c <HAL_TIM_ConfigClockSource>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800099e:	f000 f979 	bl	8000c94 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80009a2:	4828      	ldr	r0, [pc, #160]	; (8000a44 <MX_TIM1_Init+0x138>)
 80009a4:	f003 f9c5 	bl	8003d32 <HAL_TIM_OC_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80009ae:	f000 f971 	bl	8000c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009be:	4619      	mov	r1, r3
 80009c0:	4820      	ldr	r0, [pc, #128]	; (8000a44 <MX_TIM1_Init+0x138>)
 80009c2:	f003 fe1d 	bl	8004600 <HAL_TIMEx_MasterConfigSynchronization>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009cc:	f000 f962 	bl	8000c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009dc:	2300      	movs	r3, #0
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009e8:	2300      	movs	r3, #0
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f0:	2208      	movs	r2, #8
 80009f2:	4619      	mov	r1, r3
 80009f4:	4813      	ldr	r0, [pc, #76]	; (8000a44 <MX_TIM1_Init+0x138>)
 80009f6:	f003 f9f5 	bl	8003de4 <HAL_TIM_OC_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a00:	f000 f948 	bl	8000c94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4807      	ldr	r0, [pc, #28]	; (8000a44 <MX_TIM1_Init+0x138>)
 8000a28:	f003 fe66 	bl	80046f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000a32:	f000 f92f 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a36:	4803      	ldr	r0, [pc, #12]	; (8000a44 <MX_TIM1_Init+0x138>)
 8000a38:	f000 fa9a 	bl	8000f70 <HAL_TIM_MspPostInit>

}
 8000a3c:	bf00      	nop
 8000a3e:	3758      	adds	r7, #88	; 0x58
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000200 	.word	0x20000200
 8000a48:	40010000 	.word	0x40010000

08000a4c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_UART5_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_UART5_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_UART5_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_UART5_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_UART5_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_UART5_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_UART5_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_UART5_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_UART5_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_UART5_Init+0x4c>)
 8000a84:	f003 fe8a 	bl	800479c <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f901 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000248 	.word	0x20000248
 8000a9c:	40005000 	.word	0x40005000

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
 8000aba:	4b6f      	ldr	r3, [pc, #444]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a6e      	ldr	r2, [pc, #440]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000ac0:	f043 0320 	orr.w	r3, r3, #32
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b6c      	ldr	r3, [pc, #432]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0320 	and.w	r3, r3, #32
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	4b68      	ldr	r3, [pc, #416]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a67      	ldr	r2, [pc, #412]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b65      	ldr	r3, [pc, #404]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b61      	ldr	r3, [pc, #388]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a60      	ldr	r2, [pc, #384]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b5e      	ldr	r3, [pc, #376]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b5a      	ldr	r3, [pc, #360]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a59      	ldr	r2, [pc, #356]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b57      	ldr	r3, [pc, #348]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	4b53      	ldr	r3, [pc, #332]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a52      	ldr	r2, [pc, #328]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b50      	ldr	r3, [pc, #320]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b4c      	ldr	r3, [pc, #304]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a4b      	ldr	r2, [pc, #300]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000b4c:	f043 0310 	orr.w	r3, r3, #16
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b49      	ldr	r3, [pc, #292]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0310 	and.w	r3, r3, #16
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b45      	ldr	r3, [pc, #276]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a44      	ldr	r2, [pc, #272]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000b68:	f043 0308 	orr.w	r3, r3, #8
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b42      	ldr	r3, [pc, #264]	; (8000c78 <MX_GPIO_Init+0x1d8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OUT_CELL1_Pin|OUT_CELL2_Pin|OUT_CELL3_Pin|OUT_CELL4_Pin
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f24e 71fc 	movw	r1, #59388	; 0xe7fc
 8000b80:	483e      	ldr	r0, [pc, #248]	; (8000c7c <MX_GPIO_Init+0x1dc>)
 8000b82:	f001 fda3 	bl	80026cc <HAL_GPIO_WritePin>
                          |OUT_CELL5_Pin|OUT_CELL6_Pin|OUT_CELL7_Pin|OUT_CELL8_Pin
                          |OUT_CELL9_Pin|M1_S0_Pin|M1_S1_Pin|M1_S2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_CELL10_Pin|OUT_CELL11_Pin|OUT_CELL12_Pin|OUT_CELL13_Pin
 8000b86:	2200      	movs	r2, #0
 8000b88:	f640 411f 	movw	r1, #3103	; 0xc1f
 8000b8c:	483c      	ldr	r0, [pc, #240]	; (8000c80 <MX_GPIO_Init+0x1e0>)
 8000b8e:	f001 fd9d 	bl	80026cc <HAL_GPIO_WritePin>
                          |OUT_CELL18_Pin|M0_S1_Pin|M0_S2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_CELL14_Pin|OUT_CELL15_Pin|OUT_CELL16_Pin|OUT_CELL17_Pin
 8000b92:	2200      	movs	r2, #0
 8000b94:	f248 01f0 	movw	r1, #33008	; 0x80f0
 8000b98:	483a      	ldr	r0, [pc, #232]	; (8000c84 <MX_GPIO_Init+0x1e4>)
 8000b9a:	f001 fd97 	bl	80026cc <HAL_GPIO_WritePin>
                          |M0_S0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, M2_S0_Pin|M2_S1_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2103      	movs	r1, #3
 8000ba2:	4839      	ldr	r0, [pc, #228]	; (8000c88 <MX_GPIO_Init+0x1e8>)
 8000ba4:	f001 fd92 	bl	80026cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M2_S2_Pin|M3_S0_Pin|M3_S1_Pin|M3_S2_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
 8000bae:	4837      	ldr	r0, [pc, #220]	; (8000c8c <MX_GPIO_Init+0x1ec>)
 8000bb0:	f001 fd8c 	bl	80026cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_SET_GPIO_Port, D_SET_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	4835      	ldr	r0, [pc, #212]	; (8000c90 <MX_GPIO_Init+0x1f0>)
 8000bba:	f001 fd87 	bl	80026cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT_CELL1_Pin OUT_CELL2_Pin OUT_CELL3_Pin OUT_CELL4_Pin
                           OUT_CELL5_Pin OUT_CELL6_Pin OUT_CELL7_Pin OUT_CELL8_Pin
                           OUT_CELL9_Pin M1_S0_Pin M1_S1_Pin M1_S2_Pin */
  GPIO_InitStruct.Pin = OUT_CELL1_Pin|OUT_CELL2_Pin|OUT_CELL3_Pin|OUT_CELL4_Pin
 8000bbe:	f24e 73fc 	movw	r3, #59388	; 0xe7fc
 8000bc2:	61fb      	str	r3, [r7, #28]
                          |OUT_CELL5_Pin|OUT_CELL6_Pin|OUT_CELL7_Pin|OUT_CELL8_Pin
                          |OUT_CELL9_Pin|M1_S0_Pin|M1_S1_Pin|M1_S2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4829      	ldr	r0, [pc, #164]	; (8000c7c <MX_GPIO_Init+0x1dc>)
 8000bd8:	f001 fbe4 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_CELL10_Pin OUT_CELL11_Pin OUT_CELL12_Pin OUT_CELL13_Pin
                           OUT_CELL18_Pin M0_S1_Pin M0_S2_Pin */
  GPIO_InitStruct.Pin = OUT_CELL10_Pin|OUT_CELL11_Pin|OUT_CELL12_Pin|OUT_CELL13_Pin
 8000bdc:	f640 431f 	movw	r3, #3103	; 0xc1f
 8000be0:	61fb      	str	r3, [r7, #28]
                          |OUT_CELL18_Pin|M0_S1_Pin|M0_S2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4822      	ldr	r0, [pc, #136]	; (8000c80 <MX_GPIO_Init+0x1e0>)
 8000bf6:	f001 fbd5 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_CELL14_Pin OUT_CELL15_Pin OUT_CELL16_Pin OUT_CELL17_Pin
                           M0_S0_Pin */
  GPIO_InitStruct.Pin = OUT_CELL14_Pin|OUT_CELL15_Pin|OUT_CELL16_Pin|OUT_CELL17_Pin
 8000bfa:	f248 03f0 	movw	r3, #33008	; 0x80f0
 8000bfe:	61fb      	str	r3, [r7, #28]
                          |M0_S0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	481c      	ldr	r0, [pc, #112]	; (8000c84 <MX_GPIO_Init+0x1e4>)
 8000c14:	f001 fbc6 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_S0_Pin M2_S1_Pin */
  GPIO_InitStruct.Pin = M2_S0_Pin|M2_S1_Pin;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4816      	ldr	r0, [pc, #88]	; (8000c88 <MX_GPIO_Init+0x1e8>)
 8000c30:	f001 fbb8 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_S2_Pin M3_S0_Pin M3_S1_Pin M3_S2_Pin */
  GPIO_InitStruct.Pin = M2_S2_Pin|M3_S0_Pin|M3_S1_Pin|M3_S2_Pin;
 8000c34:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480f      	ldr	r0, [pc, #60]	; (8000c8c <MX_GPIO_Init+0x1ec>)
 8000c4e:	f001 fba9 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : D_SET_Pin */
  GPIO_InitStruct.Pin = D_SET_Pin;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(D_SET_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	4809      	ldr	r0, [pc, #36]	; (8000c90 <MX_GPIO_Init+0x1f0>)
 8000c6a:	f001 fb9b 	bl	80023a4 <HAL_GPIO_Init>

}
 8000c6e:	bf00      	nop
 8000c70:	3730      	adds	r7, #48	; 0x30
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40021400 	.word	0x40021400
 8000c80:	40020800 	.word	0x40020800
 8000c84:	40020000 	.word	0x40020000
 8000c88:	40021800 	.word	0x40021800
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40020c00 	.word	0x40020c00

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <Error_Handler+0x8>
	...

08000ca0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_MspInit+0x4c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <HAL_ADC_MspInit+0x7c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d127      	bne.n	8000d62 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_ADC_MspInit+0x80>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a15      	ldr	r2, [pc, #84]	; (8000d70 <HAL_ADC_MspInit+0x80>)
 8000d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_ADC_MspInit+0x80>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_ADC_MspInit+0x80>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <HAL_ADC_MspInit+0x80>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_ADC_MspInit+0x80>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <HAL_ADC_MspInit+0x84>)
 8000d5e:	f001 fb21 	bl	80023a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	; 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40012000 	.word	0x40012000
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000

08000d78 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a29      	ldr	r2, [pc, #164]	; (8000e3c <HAL_CAN_MspInit+0xc4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d14c      	bne.n	8000e34 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <HAL_CAN_MspInit+0xc8>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a27      	ldr	r2, [pc, #156]	; (8000e40 <HAL_CAN_MspInit+0xc8>)
 8000da4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <HAL_CAN_MspInit+0xc8>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <HAL_CAN_MspInit+0xc8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a20      	ldr	r2, [pc, #128]	; (8000e40 <HAL_CAN_MspInit+0xc8>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <HAL_CAN_MspInit+0xc8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000de4:	2309      	movs	r3, #9
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4815      	ldr	r0, [pc, #84]	; (8000e44 <HAL_CAN_MspInit+0xcc>)
 8000df0:	f001 fad8 	bl	80023a4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2100      	movs	r1, #0
 8000df8:	2013      	movs	r0, #19
 8000dfa:	f001 fa9c 	bl	8002336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000dfe:	2013      	movs	r0, #19
 8000e00:	f001 fab5 	bl	800236e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	2014      	movs	r0, #20
 8000e0a:	f001 fa94 	bl	8002336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e0e:	2014      	movs	r0, #20
 8000e10:	f001 faad 	bl	800236e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	2015      	movs	r0, #21
 8000e1a:	f001 fa8c 	bl	8002336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e1e:	2015      	movs	r0, #21
 8000e20:	f001 faa5 	bl	800236e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2100      	movs	r1, #0
 8000e28:	2016      	movs	r0, #22
 8000e2a:	f001 fa84 	bl	8002336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000e2e:	2016      	movs	r0, #22
 8000e30:	f001 fa9d 	bl	800236e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e34:	bf00      	nop
 8000e36:	3728      	adds	r7, #40	; 0x28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40006400 	.word	0x40006400
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020000 	.word	0x40020000

08000e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <HAL_I2C_MspInit+0x84>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12b      	bne.n	8000ec2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000e74:	f043 0320 	orr.w	r3, r3, #32
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0320 	and.w	r3, r3, #32
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e86:	2303      	movs	r3, #3
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8a:	2312      	movs	r3, #18
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e96:	2304      	movs	r3, #4
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <HAL_I2C_MspInit+0x8c>)
 8000ea2:	f001 fa7f 	bl	80023a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000eb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	; 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40005800 	.word	0x40005800
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40021400 	.word	0x40021400

08000ed8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b09a      	sub	sp, #104	; 0x68
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	225c      	movs	r2, #92	; 0x5c
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f004 fba9 	bl	8005640 <memset>
  if(hrtc->Instance==RTC)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <HAL_RTC_MspInit+0x4c>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d111      	bne.n	8000f1c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ef8:	2320      	movs	r3, #32
 8000efa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f00:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 fe58 	bl	8002bbc <HAL_RCCEx_PeriphCLKConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000f12:	f7ff febf 	bl	8000c94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_RTC_MspInit+0x50>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f1c:	bf00      	nop
 8000f1e:	3768      	adds	r7, #104	; 0x68
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40002800 	.word	0x40002800
 8000f28:	42470e3c 	.word	0x42470e3c

08000f2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_TIM_Base_MspInit+0x3c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d10d      	bne.n	8000f5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_TIM_Base_MspInit+0x40>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <HAL_TIM_Base_MspInit+0x40>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <HAL_TIM_Base_MspInit+0x40>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	40023800 	.word	0x40023800

08000f70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <HAL_TIM_MspPostInit+0x68>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d11e      	bne.n	8000fd0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <HAL_TIM_MspPostInit+0x6c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <HAL_TIM_MspPostInit+0x6c>)
 8000f9c:	f043 0310 	orr.w	r3, r3, #16
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_TIM_MspPostInit+0x6c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <HAL_TIM_MspPostInit+0x70>)
 8000fcc:	f001 f9ea 	bl	80023a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fd0:	bf00      	nop
 8000fd2:	3720      	adds	r7, #32
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40010000 	.word	0x40010000
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a28      	ldr	r2, [pc, #160]	; (80010a4 <HAL_UART_MspInit+0xc0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d14a      	bne.n	800109c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <HAL_UART_MspInit+0xc4>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a26      	ldr	r2, [pc, #152]	; (80010a8 <HAL_UART_MspInit+0xc4>)
 8001010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <HAL_UART_MspInit+0xc4>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <HAL_UART_MspInit+0xc4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a1f      	ldr	r2, [pc, #124]	; (80010a8 <HAL_UART_MspInit+0xc4>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <HAL_UART_MspInit+0xc4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_UART_MspInit+0xc4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <HAL_UART_MspInit+0xc4>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <HAL_UART_MspInit+0xc4>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800105a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800106c:	2308      	movs	r3, #8
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	480d      	ldr	r0, [pc, #52]	; (80010ac <HAL_UART_MspInit+0xc8>)
 8001078:	f001 f994 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800107c:	2304      	movs	r3, #4
 800107e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800108c:	2308      	movs	r3, #8
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <HAL_UART_MspInit+0xcc>)
 8001098:	f001 f984 	bl	80023a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	; 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40005000 	.word	0x40005000
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020c00 	.word	0x40020c00

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler+0x4>

080010ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <MemManage_Handler+0x4>

080010c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001100:	f000 f91c 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
__WEAK void CAN1_TX_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <CAN1_TX_IRQHandler+0x10>)
 800110e:	f000 fdfe 	bl	8001d0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000164 	.word	0x20000164

0800111c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
__WEAK void CAN1_RX1_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <CAN1_RX1_IRQHandler+0x10>)
 8001122:	f000 fdf4 	bl	8001d0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000164 	.word	0x20000164

08001130 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
__WEAK void CAN1_SCE_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <CAN1_SCE_IRQHandler+0x10>)
 8001136:	f000 fdea 	bl	8001d0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000164 	.word	0x20000164

08001144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <_sbrk+0x5c>)
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <_sbrk+0x60>)
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <_sbrk+0x64>)
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <_sbrk+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	429a      	cmp	r2, r3
 8001172:	d207      	bcs.n	8001184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001174:	f004 fa1c 	bl	80055b0 <__errno>
 8001178:	4603      	mov	r3, r0
 800117a:	220c      	movs	r2, #12
 800117c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	e009      	b.n	8001198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <_sbrk+0x64>)
 8001194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20020000 	.word	0x20020000
 80011a4:	00000400 	.word	0x00000400
 80011a8:	2000028c 	.word	0x2000028c
 80011ac:	20000550 	.word	0x20000550

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <SystemInit+0x20>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <SystemInit+0x20>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800120c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011da:	490e      	ldr	r1, [pc, #56]	; (8001214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f0:	4c0b      	ldr	r4, [pc, #44]	; (8001220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011fe:	f7ff ffd7 	bl	80011b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f004 f9db 	bl	80055bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff f9d5 	bl	80005b4 <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001218:	08006048 	.word	0x08006048
  ldr r2, =_sbss
 800121c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001220:	2000054c 	.word	0x2000054c

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <CAN1_RX0_IRQHandler>:
 * @NOTICE: Dont forget to get __WEAK IRQ Handler in order to defined in it.c file which created by CubeMX
 */
#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))

void CAN1_RX0_IRQHandler(void)
{
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122a:	b087      	sub	sp, #28
 800122c:	af06      	add	r7, sp, #24

  HAL_CAN_IRQHandler(&protocol.obj.bxHandle.hbxcanHandle);
 800122e:	4816      	ldr	r0, [pc, #88]	; (8001288 <CAN1_RX0_IRQHandler+0x60>)
 8001230:	f000 fd6d 	bl	8001d0e <HAL_CAN_IRQHandler>

  if( HAL_CAN_GetRxMessage( &protocol.obj.bxHandle.hbxcanHandle ,
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <CAN1_RX0_IRQHandler+0x64>)
 8001236:	4a16      	ldr	r2, [pc, #88]	; (8001290 <CAN1_RX0_IRQHandler+0x68>)
 8001238:	2100      	movs	r1, #0
 800123a:	4813      	ldr	r0, [pc, #76]	; (8001288 <CAN1_RX0_IRQHandler+0x60>)
 800123c:	f000 fc2f 	bl	8001a9e <HAL_CAN_GetRxMessage>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <CAN1_RX0_IRQHandler+0x22>
		  	  	  	        CAN_RX_FIFO0						,
							&protocol.obj.bxHandle.rxHeader 	,
							&protocol.obj.bxHandle.rxData[0] 	) != HAL_OK )
  {
	  Error_Handler();
 8001246:	f7ff fd25 	bl	8000c94 <Error_Handler>
  }

  protocol.ops.EEM_RX( &protocol.obj.canPacket  			,
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <CAN1_RX0_IRQHandler+0x60>)
 800124c:	f8d3 61b0 	ldr.w	r6, [r3, #432]	; 0x1b0
 8001250:	4d0d      	ldr	r5, [pc, #52]	; (8001288 <CAN1_RX0_IRQHandler+0x60>)
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <CAN1_RX0_IRQHandler+0x64>)
 8001254:	9304      	str	r3, [sp, #16]
 8001256:	466c      	mov	r4, sp
 8001258:	f105 0378 	add.w	r3, r5, #120	; 0x78
 800125c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800125e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001262:	f105 036c 	add.w	r3, r5, #108	; 0x6c
 8001266:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001268:	480a      	ldr	r0, [pc, #40]	; (8001294 <CAN1_RX0_IRQHandler+0x6c>)
 800126a:	47b0      	blx	r6
      				   protocol.obj.bxHandle.rxHeader		,
  					   &protocol.obj.bxHandle.rxData[0]	    );

  if( HAL_CAN_ActivateNotification(&protocol.obj.bxHandle.hbxcanHandle, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK )
 800126c:	2102      	movs	r1, #2
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <CAN1_RX0_IRQHandler+0x60>)
 8001270:	f000 fd27 	bl	8001cc2 <HAL_CAN_ActivateNotification>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <CAN1_RX0_IRQHandler+0x56>
  {
	  Error_Handler();
 800127a:	f7ff fd0b 	bl	8000c94 <Error_Handler>
  }

}
 800127e:	bf00      	nop
 8001280:	3704      	adds	r7, #4
 8001282:	46bd      	mov	sp, r7
 8001284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001286:	bf00      	nop
 8001288:	20000290 	.word	0x20000290
 800128c:	20000324 	.word	0x20000324
 8001290:	200002fc 	.word	0x200002fc
 8001294:	2000032c 	.word	0x2000032c

08001298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <HAL_Init+0x40>)
 80012a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_Init+0x40>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_Init+0x40>)
 80012ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f001 f82d 	bl	8002320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	200f      	movs	r0, #15
 80012c8:	f000 f808 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fce8 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00

080012dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x54>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x58>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 f845 	bl	800238a <HAL_SYSTICK_Config>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e00e      	b.n	8001328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d80a      	bhi.n	8001326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	f001 f80d 	bl	8002336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <HAL_InitTick+0x5c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000000 	.word	0x20000000
 8001334:	20000008 	.word	0x20000008
 8001338:	20000004 	.word	0x20000004

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000008 	.word	0x20000008
 8001360:	20000444 	.word	0x20000444

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000444 	.word	0x20000444

0800137c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff ffee 	bl	8001364 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_Delay+0x44>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffde 	bl	8001364 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000008 	.word	0x20000008

080013c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e033      	b.n	8001442 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d109      	bne.n	80013f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fc84 	bl	8000cf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d118      	bne.n	8001434 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800140a:	f023 0302 	bic.w	r3, r3, #2
 800140e:	f043 0202 	orr.w	r2, r3, #2
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f94a 	bl	80016b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f023 0303 	bic.w	r3, r3, #3
 800142a:	f043 0201 	orr.w	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	641a      	str	r2, [r3, #64]	; 0x40
 8001432:	e001      	b.n	8001438 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x1c>
 8001464:	2302      	movs	r3, #2
 8001466:	e113      	b.n	8001690 <HAL_ADC_ConfigChannel+0x244>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b09      	cmp	r3, #9
 8001476:	d925      	bls.n	80014c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68d9      	ldr	r1, [r3, #12]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	b29b      	uxth	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	3b1e      	subs	r3, #30
 800148e:	2207      	movs	r2, #7
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43da      	mvns	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	400a      	ands	r2, r1
 800149c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68d9      	ldr	r1, [r3, #12]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	4603      	mov	r3, r0
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4403      	add	r3, r0
 80014b6:	3b1e      	subs	r3, #30
 80014b8:	409a      	lsls	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	e022      	b.n	800150a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6919      	ldr	r1, [r3, #16]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	4613      	mov	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	2207      	movs	r2, #7
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	400a      	ands	r2, r1
 80014e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6919      	ldr	r1, [r3, #16]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	4603      	mov	r3, r0
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4403      	add	r3, r0
 8001500:	409a      	lsls	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b06      	cmp	r3, #6
 8001510:	d824      	bhi.n	800155c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	3b05      	subs	r3, #5
 8001524:	221f      	movs	r2, #31
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	400a      	ands	r2, r1
 8001532:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b05      	subs	r3, #5
 800154e:	fa00 f203 	lsl.w	r2, r0, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	635a      	str	r2, [r3, #52]	; 0x34
 800155a:	e04c      	b.n	80015f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b0c      	cmp	r3, #12
 8001562:	d824      	bhi.n	80015ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	3b23      	subs	r3, #35	; 0x23
 8001576:	221f      	movs	r2, #31
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43da      	mvns	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	400a      	ands	r2, r1
 8001584:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	b29b      	uxth	r3, r3
 8001592:	4618      	mov	r0, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	3b23      	subs	r3, #35	; 0x23
 80015a0:	fa00 f203 	lsl.w	r2, r0, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	631a      	str	r2, [r3, #48]	; 0x30
 80015ac:	e023      	b.n	80015f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	3b41      	subs	r3, #65	; 0x41
 80015c0:	221f      	movs	r2, #31
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	400a      	ands	r2, r1
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	4618      	mov	r0, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	3b41      	subs	r3, #65	; 0x41
 80015ea:	fa00 f203 	lsl.w	r2, r0, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015f6:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_ADC_ConfigChannel+0x250>)
 80015f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a28      	ldr	r2, [pc, #160]	; (80016a0 <HAL_ADC_ConfigChannel+0x254>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d10f      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x1d8>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b12      	cmp	r3, #18
 800160a:	d10b      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1d      	ldr	r2, [pc, #116]	; (80016a0 <HAL_ADC_ConfigChannel+0x254>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d12b      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x23a>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <HAL_ADC_ConfigChannel+0x258>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d003      	beq.n	8001640 <HAL_ADC_ConfigChannel+0x1f4>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b11      	cmp	r3, #17
 800163e:	d122      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <HAL_ADC_ConfigChannel+0x258>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d111      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_ADC_ConfigChannel+0x25c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a11      	ldr	r2, [pc, #68]	; (80016ac <HAL_ADC_ConfigChannel+0x260>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	0c9a      	lsrs	r2, r3, #18
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001678:	e002      	b.n	8001680 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	3b01      	subs	r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f9      	bne.n	800167a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40012300 	.word	0x40012300
 80016a0:	40012000 	.word	0x40012000
 80016a4:	10000012 	.word	0x10000012
 80016a8:	20000000 	.word	0x20000000
 80016ac:	431bde83 	.word	0x431bde83

080016b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016b8:	4b79      	ldr	r3, [pc, #484]	; (80018a0 <ADC_Init+0x1f0>)
 80016ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6859      	ldr	r1, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	021a      	lsls	r2, r3, #8
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001708:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6859      	ldr	r1, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800172a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6899      	ldr	r1, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	4a58      	ldr	r2, [pc, #352]	; (80018a4 <ADC_Init+0x1f4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d022      	beq.n	800178e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001756:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6899      	ldr	r1, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6899      	ldr	r1, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	e00f      	b.n	80017ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800179c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0202 	bic.w	r2, r2, #2
 80017bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6899      	ldr	r1, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7e1b      	ldrb	r3, [r3, #24]
 80017c8:	005a      	lsls	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d01b      	beq.n	8001814 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6859      	ldr	r1, [r3, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	3b01      	subs	r3, #1
 8001808:	035a      	lsls	r2, r3, #13
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	e007      	b.n	8001824 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001822:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	3b01      	subs	r3, #1
 8001840:	051a      	lsls	r2, r3, #20
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001858:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6899      	ldr	r1, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001866:	025a      	lsls	r2, r3, #9
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800187e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6899      	ldr	r1, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	029a      	lsls	r2, r3, #10
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	609a      	str	r2, [r3, #8]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40012300 	.word	0x40012300
 80018a4:	0f000001 	.word	0x0f000001

080018a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0ed      	b.n	8001a96 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fa56 	bl	8000d78 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018dc:	f7ff fd42 	bl	8001364 <HAL_GetTick>
 80018e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018e2:	e012      	b.n	800190a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018e4:	f7ff fd3e 	bl	8001364 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b0a      	cmp	r3, #10
 80018f0:	d90b      	bls.n	800190a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2205      	movs	r2, #5
 8001902:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0c5      	b.n	8001a96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0e5      	beq.n	80018e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0202 	bic.w	r2, r2, #2
 8001926:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001928:	f7ff fd1c 	bl	8001364 <HAL_GetTick>
 800192c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800192e:	e012      	b.n	8001956 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001930:	f7ff fd18 	bl	8001364 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b0a      	cmp	r3, #10
 800193c:	d90b      	bls.n	8001956 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2205      	movs	r2, #5
 800194e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e09f      	b.n	8001a96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1e5      	bne.n	8001930 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7e1b      	ldrb	r3, [r3, #24]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d108      	bne.n	800197e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	e007      	b.n	800198e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7e5b      	ldrb	r3, [r3, #25]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d108      	bne.n	80019a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e007      	b.n	80019b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7e9b      	ldrb	r3, [r3, #26]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d108      	bne.n	80019d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0220 	orr.w	r2, r2, #32
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e007      	b.n	80019e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0220 	bic.w	r2, r2, #32
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7edb      	ldrb	r3, [r3, #27]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d108      	bne.n	80019fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0210 	bic.w	r2, r2, #16
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e007      	b.n	8001a0c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0210 	orr.w	r2, r2, #16
 8001a0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7f1b      	ldrb	r3, [r3, #28]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d108      	bne.n	8001a26 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0208 	orr.w	r2, r2, #8
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e007      	b.n	8001a36 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0208 	bic.w	r2, r2, #8
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7f5b      	ldrb	r3, [r3, #29]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d108      	bne.n	8001a50 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0204 	orr.w	r2, r2, #4
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e007      	b.n	8001a60 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0204 	bic.w	r2, r2, #4
 8001a5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	ea42 0103 	orr.w	r1, r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	1e5a      	subs	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b087      	sub	sp, #28
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d003      	beq.n	8001ac2 <HAL_CAN_GetRxMessage+0x24>
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	f040 80f3 	bne.w	8001ca8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10e      	bne.n	8001ae6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d116      	bne.n	8001b04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e0e7      	b.n	8001cb6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d107      	bne.n	8001b04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0d8      	b.n	8001cb6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	331b      	adds	r3, #27
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	4413      	add	r3, r2
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0204 	and.w	r2, r3, #4
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10c      	bne.n	8001b3c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	331b      	adds	r3, #27
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	4413      	add	r3, r2
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0d5b      	lsrs	r3, r3, #21
 8001b32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e00b      	b.n	8001b54 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	331b      	adds	r3, #27
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	4413      	add	r3, r2
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	08db      	lsrs	r3, r3, #3
 8001b4c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	331b      	adds	r3, #27
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	4413      	add	r3, r2
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0202 	and.w	r2, r3, #2
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	331b      	adds	r3, #27
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	4413      	add	r3, r2
 8001b76:	3304      	adds	r3, #4
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 020f 	and.w	r2, r3, #15
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	331b      	adds	r3, #27
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3304      	adds	r3, #4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	331b      	adds	r3, #27
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	0c1b      	lsrs	r3, r3, #16
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0a1a      	lsrs	r2, r3, #8
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	4413      	add	r3, r2
 8001bec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	0c1a      	lsrs	r2, r3, #16
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	0e1a      	lsrs	r2, r3, #24
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	3303      	adds	r3, #3
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	4413      	add	r3, r2
 8001c20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	0a1a      	lsrs	r2, r3, #8
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	3305      	adds	r3, #5
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0c1a      	lsrs	r2, r3, #16
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	3306      	adds	r3, #6
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0e1a      	lsrs	r2, r3, #24
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	3307      	adds	r3, #7
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d108      	bne.n	8001c94 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 0220 	orr.w	r2, r2, #32
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	e007      	b.n	8001ca4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691a      	ldr	r2, [r3, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0220 	orr.w	r2, r2, #32
 8001ca2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e006      	b.n	8001cb6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
  }
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	371c      	adds	r7, #28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b085      	sub	sp, #20
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d002      	beq.n	8001ce0 <HAL_CAN_ActivateNotification+0x1e>
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d109      	bne.n	8001cf4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6959      	ldr	r1, [r3, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e006      	b.n	8001d02 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
  }
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b08a      	sub	sp, #40	; 0x28
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d07c      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d023      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2201      	movs	r2, #1
 8001d64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f983 	bl	800207c <HAL_CAN_TxMailbox0CompleteCallback>
 8001d76:	e016      	b.n	8001da6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d004      	beq.n	8001d8c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8a:	e00c      	b.n	8001da6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9e:	e002      	b.n	8001da6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f989 	bl	80020b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d024      	beq.n	8001dfa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f963 	bl	8002090 <HAL_CAN_TxMailbox1CompleteCallback>
 8001dca:	e016      	b.n	8001dfa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dde:	e00c      	b.n	8001dfa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d004      	beq.n	8001df4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
 8001df2:	e002      	b.n	8001dfa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f969 	bl	80020cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d024      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f943 	bl	80020a4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e1e:	e016      	b.n	8001e4e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
 8001e32:	e00c      	b.n	8001e4e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d004      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
 8001e46:	e002      	b.n	8001e4e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f949 	bl	80020e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00c      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2210      	movs	r2, #16
 8001e70:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00b      	beq.n	8001e94 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f93a 	bl	8002108 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d009      	beq.n	8001eb2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f921 	bl	80020f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00c      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2210      	movs	r2, #16
 8001ed4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00b      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d006      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2208      	movs	r2, #8
 8001ef0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f91c 	bl	8002130 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f903 	bl	800211c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00b      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d006      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2210      	movs	r2, #16
 8001f30:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f906 	bl	8002144 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2208      	movs	r2, #8
 8001f52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f8ff 	bl	8002158 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d07b      	beq.n	800205c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d072      	beq.n	8002054 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d043      	beq.n	8002054 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d03e      	beq.n	8002054 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fdc:	2b60      	cmp	r3, #96	; 0x60
 8001fde:	d02b      	beq.n	8002038 <HAL_CAN_IRQHandler+0x32a>
 8001fe0:	2b60      	cmp	r3, #96	; 0x60
 8001fe2:	d82e      	bhi.n	8002042 <HAL_CAN_IRQHandler+0x334>
 8001fe4:	2b50      	cmp	r3, #80	; 0x50
 8001fe6:	d022      	beq.n	800202e <HAL_CAN_IRQHandler+0x320>
 8001fe8:	2b50      	cmp	r3, #80	; 0x50
 8001fea:	d82a      	bhi.n	8002042 <HAL_CAN_IRQHandler+0x334>
 8001fec:	2b40      	cmp	r3, #64	; 0x40
 8001fee:	d019      	beq.n	8002024 <HAL_CAN_IRQHandler+0x316>
 8001ff0:	2b40      	cmp	r3, #64	; 0x40
 8001ff2:	d826      	bhi.n	8002042 <HAL_CAN_IRQHandler+0x334>
 8001ff4:	2b30      	cmp	r3, #48	; 0x30
 8001ff6:	d010      	beq.n	800201a <HAL_CAN_IRQHandler+0x30c>
 8001ff8:	2b30      	cmp	r3, #48	; 0x30
 8001ffa:	d822      	bhi.n	8002042 <HAL_CAN_IRQHandler+0x334>
 8001ffc:	2b10      	cmp	r3, #16
 8001ffe:	d002      	beq.n	8002006 <HAL_CAN_IRQHandler+0x2f8>
 8002000:	2b20      	cmp	r3, #32
 8002002:	d005      	beq.n	8002010 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002004:	e01d      	b.n	8002042 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	f043 0308 	orr.w	r3, r3, #8
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800200e:	e019      	b.n	8002044 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	f043 0310 	orr.w	r3, r3, #16
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002018:	e014      	b.n	8002044 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	f043 0320 	orr.w	r3, r3, #32
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002022:	e00f      	b.n	8002044 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800202c:	e00a      	b.n	8002044 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002036:	e005      	b.n	8002044 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002040:	e000      	b.n	8002044 <HAL_CAN_IRQHandler+0x336>
            break;
 8002042:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002052:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2204      	movs	r2, #4
 800205a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	2b00      	cmp	r3, #0
 8002060:	d008      	beq.n	8002074 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f87c 	bl	800216c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002074:	bf00      	nop
 8002076:	3728      	adds	r7, #40	; 0x28
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800219c:	4013      	ands	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b2:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	60d3      	str	r3, [r2, #12]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	f003 0307 	and.w	r3, r3, #7
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	db0b      	blt.n	800220e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	f003 021f 	and.w	r2, r3, #31
 80021fc:	4907      	ldr	r1, [pc, #28]	; (800221c <__NVIC_EnableIRQ+0x38>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2001      	movs	r0, #1
 8002206:	fa00 f202 	lsl.w	r2, r0, r2
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db0a      	blt.n	800224a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	490c      	ldr	r1, [pc, #48]	; (800226c <__NVIC_SetPriority+0x4c>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	440b      	add	r3, r1
 8002244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002248:	e00a      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4908      	ldr	r1, [pc, #32]	; (8002270 <__NVIC_SetPriority+0x50>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000e100 	.word	0xe000e100
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f1c3 0307 	rsb	r3, r3, #7
 800228e:	2b04      	cmp	r3, #4
 8002290:	bf28      	it	cs
 8002292:	2304      	movcs	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3304      	adds	r3, #4
 800229a:	2b06      	cmp	r3, #6
 800229c:	d902      	bls.n	80022a4 <NVIC_EncodePriority+0x30>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3b03      	subs	r3, #3
 80022a2:	e000      	b.n	80022a6 <NVIC_EncodePriority+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	4313      	orrs	r3, r2
         );
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ec:	d301      	bcc.n	80022f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00f      	b.n	8002312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <SysTick_Config+0x40>)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fa:	210f      	movs	r1, #15
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002300:	f7ff ff8e 	bl	8002220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <SysTick_Config+0x40>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <SysTick_Config+0x40>)
 800230c:	2207      	movs	r2, #7
 800230e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	e000e010 	.word	0xe000e010

08002320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ff29 	bl	8002180 <__NVIC_SetPriorityGrouping>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002348:	f7ff ff3e 	bl	80021c8 <__NVIC_GetPriorityGrouping>
 800234c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	6978      	ldr	r0, [r7, #20]
 8002354:	f7ff ff8e 	bl	8002274 <NVIC_EncodePriority>
 8002358:	4602      	mov	r2, r0
 800235a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff5d 	bl	8002220 <__NVIC_SetPriority>
}
 8002366:	bf00      	nop
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff31 	bl	80021e4 <__NVIC_EnableIRQ>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ffa2 	bl	80022dc <SysTick_Config>
 8002398:	4603      	mov	r3, r0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e165      	b.n	800268c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	f040 8154 	bne.w	8002686 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d005      	beq.n	80023f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d130      	bne.n	8002458 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800242c:	2201      	movs	r2, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 0201 	and.w	r2, r3, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b03      	cmp	r3, #3
 8002462:	d017      	beq.n	8002494 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d123      	bne.n	80024e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	69b9      	ldr	r1, [r7, #24]
 80024e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0203 	and.w	r2, r3, #3
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80ae 	beq.w	8002686 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b5d      	ldr	r3, [pc, #372]	; (80026a4 <HAL_GPIO_Init+0x300>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	4a5c      	ldr	r2, [pc, #368]	; (80026a4 <HAL_GPIO_Init+0x300>)
 8002534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002538:	6453      	str	r3, [r2, #68]	; 0x44
 800253a:	4b5a      	ldr	r3, [pc, #360]	; (80026a4 <HAL_GPIO_Init+0x300>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002546:	4a58      	ldr	r2, [pc, #352]	; (80026a8 <HAL_GPIO_Init+0x304>)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4f      	ldr	r2, [pc, #316]	; (80026ac <HAL_GPIO_Init+0x308>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d025      	beq.n	80025be <HAL_GPIO_Init+0x21a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4e      	ldr	r2, [pc, #312]	; (80026b0 <HAL_GPIO_Init+0x30c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d01f      	beq.n	80025ba <HAL_GPIO_Init+0x216>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4d      	ldr	r2, [pc, #308]	; (80026b4 <HAL_GPIO_Init+0x310>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d019      	beq.n	80025b6 <HAL_GPIO_Init+0x212>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4c      	ldr	r2, [pc, #304]	; (80026b8 <HAL_GPIO_Init+0x314>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_GPIO_Init+0x20e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4b      	ldr	r2, [pc, #300]	; (80026bc <HAL_GPIO_Init+0x318>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00d      	beq.n	80025ae <HAL_GPIO_Init+0x20a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4a      	ldr	r2, [pc, #296]	; (80026c0 <HAL_GPIO_Init+0x31c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d007      	beq.n	80025aa <HAL_GPIO_Init+0x206>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a49      	ldr	r2, [pc, #292]	; (80026c4 <HAL_GPIO_Init+0x320>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d101      	bne.n	80025a6 <HAL_GPIO_Init+0x202>
 80025a2:	2306      	movs	r3, #6
 80025a4:	e00c      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025a6:	2307      	movs	r3, #7
 80025a8:	e00a      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025aa:	2305      	movs	r3, #5
 80025ac:	e008      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025ae:	2304      	movs	r3, #4
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025b2:	2303      	movs	r3, #3
 80025b4:	e004      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e002      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025be:	2300      	movs	r3, #0
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	f002 0203 	and.w	r2, r2, #3
 80025c6:	0092      	lsls	r2, r2, #2
 80025c8:	4093      	lsls	r3, r2
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d0:	4935      	ldr	r1, [pc, #212]	; (80026a8 <HAL_GPIO_Init+0x304>)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	3302      	adds	r3, #2
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025de:	4b3a      	ldr	r3, [pc, #232]	; (80026c8 <HAL_GPIO_Init+0x324>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002602:	4a31      	ldr	r2, [pc, #196]	; (80026c8 <HAL_GPIO_Init+0x324>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002608:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <HAL_GPIO_Init+0x324>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800262c:	4a26      	ldr	r2, [pc, #152]	; (80026c8 <HAL_GPIO_Init+0x324>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002632:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <HAL_GPIO_Init+0x324>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002656:	4a1c      	ldr	r2, [pc, #112]	; (80026c8 <HAL_GPIO_Init+0x324>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800265c:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_GPIO_Init+0x324>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002680:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <HAL_GPIO_Init+0x324>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3301      	adds	r3, #1
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b0f      	cmp	r3, #15
 8002690:	f67f ae96 	bls.w	80023c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3724      	adds	r7, #36	; 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40013800 	.word	0x40013800
 80026ac:	40020000 	.word	0x40020000
 80026b0:	40020400 	.word	0x40020400
 80026b4:	40020800 	.word	0x40020800
 80026b8:	40020c00 	.word	0x40020c00
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40021400 	.word	0x40021400
 80026c4:	40021800 	.word	0x40021800
 80026c8:	40013c00 	.word	0x40013c00

080026cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]
 80026d8:	4613      	mov	r3, r2
 80026da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026dc:	787b      	ldrb	r3, [r7, #1]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026e2:	887a      	ldrh	r2, [r7, #2]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026e8:	e003      	b.n	80026f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ea:	887b      	ldrh	r3, [r7, #2]
 80026ec:	041a      	lsls	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	619a      	str	r2, [r3, #24]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e12b      	b.n	800296a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe fb8e 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2224      	movs	r2, #36	; 0x24
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002752:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002762:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002764:	f000 fa02 	bl	8002b6c <HAL_RCC_GetPCLK1Freq>
 8002768:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4a81      	ldr	r2, [pc, #516]	; (8002974 <HAL_I2C_Init+0x274>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d807      	bhi.n	8002784 <HAL_I2C_Init+0x84>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4a80      	ldr	r2, [pc, #512]	; (8002978 <HAL_I2C_Init+0x278>)
 8002778:	4293      	cmp	r3, r2
 800277a:	bf94      	ite	ls
 800277c:	2301      	movls	r3, #1
 800277e:	2300      	movhi	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	e006      	b.n	8002792 <HAL_I2C_Init+0x92>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a7d      	ldr	r2, [pc, #500]	; (800297c <HAL_I2C_Init+0x27c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	bf94      	ite	ls
 800278c:	2301      	movls	r3, #1
 800278e:	2300      	movhi	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e0e7      	b.n	800296a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4a78      	ldr	r2, [pc, #480]	; (8002980 <HAL_I2C_Init+0x280>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	0c9b      	lsrs	r3, r3, #18
 80027a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4a6a      	ldr	r2, [pc, #424]	; (8002974 <HAL_I2C_Init+0x274>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d802      	bhi.n	80027d4 <HAL_I2C_Init+0xd4>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	3301      	adds	r3, #1
 80027d2:	e009      	b.n	80027e8 <HAL_I2C_Init+0xe8>
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	4a69      	ldr	r2, [pc, #420]	; (8002984 <HAL_I2C_Init+0x284>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	099b      	lsrs	r3, r3, #6
 80027e6:	3301      	adds	r3, #1
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	430b      	orrs	r3, r1
 80027ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	495c      	ldr	r1, [pc, #368]	; (8002974 <HAL_I2C_Init+0x274>)
 8002804:	428b      	cmp	r3, r1
 8002806:	d819      	bhi.n	800283c <HAL_I2C_Init+0x13c>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1e59      	subs	r1, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	fbb1 f3f3 	udiv	r3, r1, r3
 8002816:	1c59      	adds	r1, r3, #1
 8002818:	f640 73fc 	movw	r3, #4092	; 0xffc
 800281c:	400b      	ands	r3, r1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_I2C_Init+0x138>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1e59      	subs	r1, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002830:	3301      	adds	r3, #1
 8002832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002836:	e051      	b.n	80028dc <HAL_I2C_Init+0x1dc>
 8002838:	2304      	movs	r3, #4
 800283a:	e04f      	b.n	80028dc <HAL_I2C_Init+0x1dc>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d111      	bne.n	8002868 <HAL_I2C_Init+0x168>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1e58      	subs	r0, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	440b      	add	r3, r1
 8002852:	fbb0 f3f3 	udiv	r3, r0, r3
 8002856:	3301      	adds	r3, #1
 8002858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	e012      	b.n	800288e <HAL_I2C_Init+0x18e>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1e58      	subs	r0, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	0099      	lsls	r1, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	fbb0 f3f3 	udiv	r3, r0, r3
 800287e:	3301      	adds	r3, #1
 8002880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_I2C_Init+0x196>
 8002892:	2301      	movs	r3, #1
 8002894:	e022      	b.n	80028dc <HAL_I2C_Init+0x1dc>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10e      	bne.n	80028bc <HAL_I2C_Init+0x1bc>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1e58      	subs	r0, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6859      	ldr	r1, [r3, #4]
 80028a6:	460b      	mov	r3, r1
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	440b      	add	r3, r1
 80028ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b0:	3301      	adds	r3, #1
 80028b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ba:	e00f      	b.n	80028dc <HAL_I2C_Init+0x1dc>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1e58      	subs	r0, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	0099      	lsls	r1, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d2:	3301      	adds	r3, #1
 80028d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	6809      	ldr	r1, [r1, #0]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69da      	ldr	r2, [r3, #28]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800290a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6911      	ldr	r1, [r2, #16]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68d2      	ldr	r2, [r2, #12]
 8002916:	4311      	orrs	r1, r2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	430b      	orrs	r3, r1
 800291e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	000186a0 	.word	0x000186a0
 8002978:	001e847f 	.word	0x001e847f
 800297c:	003d08ff 	.word	0x003d08ff
 8002980:	431bde83 	.word	0x431bde83
 8002984:	10624dd3 	.word	0x10624dd3

08002988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0cc      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800299c:	4b68      	ldr	r3, [pc, #416]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d90c      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b65      	ldr	r3, [pc, #404]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b63      	ldr	r3, [pc, #396]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0b8      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029dc:	4b59      	ldr	r3, [pc, #356]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a58      	ldr	r2, [pc, #352]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f4:	4b53      	ldr	r3, [pc, #332]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a52      	ldr	r2, [pc, #328]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b50      	ldr	r3, [pc, #320]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	494d      	ldr	r1, [pc, #308]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d044      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d119      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e07f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a46:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e06f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a56:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e067      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a66:	4b37      	ldr	r3, [pc, #220]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f023 0203 	bic.w	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4934      	ldr	r1, [pc, #208]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a78:	f7fe fc74 	bl	8001364 <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a80:	f7fe fc70 	bl	8001364 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e04f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 020c 	and.w	r2, r3, #12
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d1eb      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d20c      	bcs.n	8002ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e032      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4916      	ldr	r1, [pc, #88]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d009      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002afa:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	490e      	ldr	r1, [pc, #56]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b0e:	f000 fb7f 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 8002b12:	4602      	mov	r2, r0
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	490a      	ldr	r1, [pc, #40]	; (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	5ccb      	ldrb	r3, [r1, r3]
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fbd4 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023c00 	.word	0x40023c00
 8002b44:	40023800 	.word	0x40023800
 8002b48:	08005f6c 	.word	0x08005f6c
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	20000004 	.word	0x20000004

08002b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b58:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000000 	.word	0x20000000

08002b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b70:	f7ff fff0 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	0a9b      	lsrs	r3, r3, #10
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	4903      	ldr	r1, [pc, #12]	; (8002b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	08005f7c 	.word	0x08005f7c

08002b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b98:	f7ff ffdc 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	0b5b      	lsrs	r3, r3, #13
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	4903      	ldr	r1, [pc, #12]	; (8002bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	08005f7c 	.word	0x08005f7c

08002bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08c      	sub	sp, #48	; 0x30
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d010      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002bf4:	4b6f      	ldr	r3, [pc, #444]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bfa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	496c      	ldr	r1, [pc, #432]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002c12:	2301      	movs	r3, #1
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d010      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002c22:	4b64      	ldr	r3, [pc, #400]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c28:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c30:	4960      	ldr	r1, [pc, #384]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002c40:	2301      	movs	r3, #1
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d017      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c50:	4b58      	ldr	r3, [pc, #352]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	4955      	ldr	r1, [pc, #340]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002c70:	2301      	movs	r3, #1
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d017      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c8c:	4b49      	ldr	r3, [pc, #292]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9a:	4946      	ldr	r1, [pc, #280]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002cac:	2301      	movs	r3, #1
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 808a 	beq.w	8002dde <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	4a38      	ldr	r2, [pc, #224]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cda:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ce6:	4b34      	ldr	r3, [pc, #208]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cf2:	f7fe fb37 	bl	8001364 <HAL_GetTick>
 8002cf6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002cfa:	f7fe fb33 	bl	8001364 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e278      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d0c:	4b2a      	ldr	r3, [pc, #168]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d18:	4b26      	ldr	r3, [pc, #152]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d20:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d02f      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d30:	6a3a      	ldr	r2, [r7, #32]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d028      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d36:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d40:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d46:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d4c:	4a19      	ldr	r2, [pc, #100]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d52:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d114      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fb01 	bl	8001364 <HAL_GetTick>
 8002d62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f7fe fafd 	bl	8001364 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e240      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7c:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ee      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d94:	d114      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002daa:	4902      	ldr	r1, [pc, #8]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]
 8002db0:	e00c      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	42470e40 	.word	0x42470e40
 8002dc0:	4b4a      	ldr	r3, [pc, #296]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4a49      	ldr	r2, [pc, #292]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dca:	6093      	str	r3, [r2, #8]
 8002dcc:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd8:	4944      	ldr	r1, [pc, #272]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d004      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002df0:	4b3f      	ldr	r3, [pc, #252]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002df2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002e00:	4b3a      	ldr	r3, [pc, #232]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0e:	4937      	ldr	r1, [pc, #220]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e22:	4b32      	ldr	r3, [pc, #200]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e28:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e30:	492e      	ldr	r1, [pc, #184]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d011      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e44:	4b29      	ldr	r3, [pc, #164]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e4a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e52:	4926      	ldr	r1, [pc, #152]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e62:	d101      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002e64:	2301      	movs	r3, #1
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002e74:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	491a      	ldr	r1, [pc, #104]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d011      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002e96:	4b15      	ldr	r3, [pc, #84]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea4:	4911      	ldr	r1, [pc, #68]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb4:	d101      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ec8:	f040 80ff 	bne.w	80030ca <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ed2:	f7fe fa47 	bl	8001364 <HAL_GetTick>
 8002ed6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ed8:	e00e      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002eda:	f7fe fa43 	bl	8001364 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d907      	bls.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e188      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	424711e0 	.word	0x424711e0
 8002ef4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ef8:	4b7e      	ldr	r3, [pc, #504]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ea      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d028      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d124      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002f2c:	4b71      	ldr	r3, [pc, #452]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f32:	0c1b      	lsrs	r3, r3, #16
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	3301      	adds	r3, #1
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f3e:	4b6d      	ldr	r3, [pc, #436]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f44:	0e1b      	lsrs	r3, r3, #24
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	019b      	lsls	r3, r3, #6
 8002f56:	431a      	orrs	r2, r3
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	085b      	lsrs	r3, r3, #1
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	041b      	lsls	r3, r3, #16
 8002f60:	431a      	orrs	r2, r3
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	061b      	lsls	r3, r3, #24
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	071b      	lsls	r3, r3, #28
 8002f6e:	4961      	ldr	r1, [pc, #388]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d004      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f8a:	d00a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d035      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fa0:	d130      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002fa2:	4b54      	ldr	r3, [pc, #336]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fb4:	4b4f      	ldr	r3, [pc, #316]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fba:	0f1b      	lsrs	r3, r3, #28
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	019b      	lsls	r3, r3, #6
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	085b      	lsrs	r3, r3, #1
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	041b      	lsls	r3, r3, #16
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	061b      	lsls	r3, r3, #24
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	071b      	lsls	r3, r3, #28
 8002fe4:	4943      	ldr	r1, [pc, #268]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002fec:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff2:	f023 021f 	bic.w	r2, r3, #31
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	493d      	ldr	r1, [pc, #244]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d029      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003018:	d124      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800301a:	4b36      	ldr	r3, [pc, #216]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800301c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	3301      	adds	r3, #1
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800302c:	4b31      	ldr	r3, [pc, #196]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800302e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003032:	0f1b      	lsrs	r3, r3, #28
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	019b      	lsls	r3, r3, #6
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	3b01      	subs	r3, #1
 800304e:	041b      	lsls	r3, r3, #16
 8003050:	431a      	orrs	r2, r3
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	061b      	lsls	r3, r3, #24
 8003056:	431a      	orrs	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	071b      	lsls	r3, r3, #28
 800305c:	4925      	ldr	r1, [pc, #148]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800306c:	2b00      	cmp	r3, #0
 800306e:	d016      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	019b      	lsls	r3, r3, #6
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	085b      	lsrs	r3, r3, #1
 8003082:	3b01      	subs	r3, #1
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	071b      	lsls	r3, r3, #28
 8003096:	4917      	ldr	r1, [pc, #92]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800309e:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030a4:	f7fe f95e 	bl	8001364 <HAL_GetTick>
 80030a8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030ac:	f7fe f95a 	bl	8001364 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e09f      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030be:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	f040 8095 	bne.w	80031fc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030d8:	f7fe f944 	bl	8001364 <HAL_GetTick>
 80030dc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030de:	e00f      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80030e0:	f7fe f940 	bl	8001364 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d908      	bls.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e085      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x642>
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800
 80030f8:	42470068 	.word	0x42470068
 80030fc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003100:	4b41      	ldr	r3, [pc, #260]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800310c:	d0e8      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800312a:	2b00      	cmp	r3, #0
 800312c:	d02b      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003132:	2b00      	cmp	r3, #0
 8003134:	d127      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003136:	4b34      	ldr	r3, [pc, #208]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	3301      	adds	r3, #1
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	019b      	lsls	r3, r3, #6
 8003152:	431a      	orrs	r2, r3
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	085b      	lsrs	r3, r3, #1
 8003158:	3b01      	subs	r3, #1
 800315a:	041b      	lsls	r3, r3, #16
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	061b      	lsls	r3, r3, #24
 8003164:	4928      	ldr	r1, [pc, #160]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800316c:	4b26      	ldr	r3, [pc, #152]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800316e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003172:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	3b01      	subs	r3, #1
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	4922      	ldr	r1, [pc, #136]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d01d      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800319a:	d118      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800319c:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	0e1b      	lsrs	r3, r3, #24
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	019b      	lsls	r3, r3, #6
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	3b01      	subs	r3, #1
 80031be:	041b      	lsls	r3, r3, #16
 80031c0:	431a      	orrs	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	061b      	lsls	r3, r3, #24
 80031c6:	4910      	ldr	r1, [pc, #64]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031ce:	4b0f      	ldr	r3, [pc, #60]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031d4:	f7fe f8c6 	bl	8001364 <HAL_GetTick>
 80031d8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80031dc:	f7fe f8c2 	bl	8001364 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e007      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031fa:	d1ef      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3730      	adds	r7, #48	; 0x30
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800
 800320c:	42470070 	.word	0x42470070

08003210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003214:	b0a6      	sub	sp, #152	; 0x98
 8003216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003236:	4bc8      	ldr	r3, [pc, #800]	; (8003558 <HAL_RCC_GetSysClockFreq+0x348>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b0c      	cmp	r3, #12
 8003240:	f200 817e 	bhi.w	8003540 <HAL_RCC_GetSysClockFreq+0x330>
 8003244:	a201      	add	r2, pc, #4	; (adr r2, 800324c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324a:	bf00      	nop
 800324c:	08003281 	.word	0x08003281
 8003250:	08003541 	.word	0x08003541
 8003254:	08003541 	.word	0x08003541
 8003258:	08003541 	.word	0x08003541
 800325c:	08003289 	.word	0x08003289
 8003260:	08003541 	.word	0x08003541
 8003264:	08003541 	.word	0x08003541
 8003268:	08003541 	.word	0x08003541
 800326c:	08003291 	.word	0x08003291
 8003270:	08003541 	.word	0x08003541
 8003274:	08003541 	.word	0x08003541
 8003278:	08003541 	.word	0x08003541
 800327c:	080033fb 	.word	0x080033fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003280:	4bb6      	ldr	r3, [pc, #728]	; (800355c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003286:	e15f      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003288:	4bb5      	ldr	r3, [pc, #724]	; (8003560 <HAL_RCC_GetSysClockFreq+0x350>)
 800328a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800328e:	e15b      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003290:	4bb1      	ldr	r3, [pc, #708]	; (8003558 <HAL_RCC_GetSysClockFreq+0x348>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003298:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800329c:	4bae      	ldr	r3, [pc, #696]	; (8003558 <HAL_RCC_GetSysClockFreq+0x348>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d031      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a8:	4bab      	ldr	r3, [pc, #684]	; (8003558 <HAL_RCC_GetSysClockFreq+0x348>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	099b      	lsrs	r3, r3, #6
 80032ae:	2200      	movs	r2, #0
 80032b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80032b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ba:	663b      	str	r3, [r7, #96]	; 0x60
 80032bc:	2300      	movs	r3, #0
 80032be:	667b      	str	r3, [r7, #100]	; 0x64
 80032c0:	4ba7      	ldr	r3, [pc, #668]	; (8003560 <HAL_RCC_GetSysClockFreq+0x350>)
 80032c2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80032c6:	462a      	mov	r2, r5
 80032c8:	fb03 f202 	mul.w	r2, r3, r2
 80032cc:	2300      	movs	r3, #0
 80032ce:	4621      	mov	r1, r4
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	4aa2      	ldr	r2, [pc, #648]	; (8003560 <HAL_RCC_GetSysClockFreq+0x350>)
 80032d8:	4621      	mov	r1, r4
 80032da:	fba1 1202 	umull	r1, r2, r1, r2
 80032de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032e0:	460a      	mov	r2, r1
 80032e2:	67ba      	str	r2, [r7, #120]	; 0x78
 80032e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80032e6:	4413      	add	r3, r2
 80032e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ee:	2200      	movs	r2, #0
 80032f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80032f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80032f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032f8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032fc:	f7fc ffd8 	bl	80002b0 <__aeabi_uldivmod>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4613      	mov	r3, r2
 8003306:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800330a:	e064      	b.n	80033d6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330c:	4b92      	ldr	r3, [pc, #584]	; (8003558 <HAL_RCC_GetSysClockFreq+0x348>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	099b      	lsrs	r3, r3, #6
 8003312:	2200      	movs	r2, #0
 8003314:	653b      	str	r3, [r7, #80]	; 0x50
 8003316:	657a      	str	r2, [r7, #84]	; 0x54
 8003318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800331a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003320:	2300      	movs	r3, #0
 8003322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003324:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003328:	4622      	mov	r2, r4
 800332a:	462b      	mov	r3, r5
 800332c:	f04f 0000 	mov.w	r0, #0
 8003330:	f04f 0100 	mov.w	r1, #0
 8003334:	0159      	lsls	r1, r3, #5
 8003336:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800333a:	0150      	lsls	r0, r2, #5
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4621      	mov	r1, r4
 8003342:	1a51      	subs	r1, r2, r1
 8003344:	6139      	str	r1, [r7, #16]
 8003346:	4629      	mov	r1, r5
 8003348:	eb63 0301 	sbc.w	r3, r3, r1
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800335a:	4659      	mov	r1, fp
 800335c:	018b      	lsls	r3, r1, #6
 800335e:	4651      	mov	r1, sl
 8003360:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003364:	4651      	mov	r1, sl
 8003366:	018a      	lsls	r2, r1, #6
 8003368:	4651      	mov	r1, sl
 800336a:	ebb2 0801 	subs.w	r8, r2, r1
 800336e:	4659      	mov	r1, fp
 8003370:	eb63 0901 	sbc.w	r9, r3, r1
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003380:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003384:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003388:	4690      	mov	r8, r2
 800338a:	4699      	mov	r9, r3
 800338c:	4623      	mov	r3, r4
 800338e:	eb18 0303 	adds.w	r3, r8, r3
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	462b      	mov	r3, r5
 8003396:	eb49 0303 	adc.w	r3, r9, r3
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033a8:	4629      	mov	r1, r5
 80033aa:	028b      	lsls	r3, r1, #10
 80033ac:	4621      	mov	r1, r4
 80033ae:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033b2:	4621      	mov	r1, r4
 80033b4:	028a      	lsls	r2, r1, #10
 80033b6:	4610      	mov	r0, r2
 80033b8:	4619      	mov	r1, r3
 80033ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033be:	2200      	movs	r2, #0
 80033c0:	643b      	str	r3, [r7, #64]	; 0x40
 80033c2:	647a      	str	r2, [r7, #68]	; 0x44
 80033c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033c8:	f7fc ff72 	bl	80002b0 <__aeabi_uldivmod>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4613      	mov	r3, r2
 80033d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033d6:	4b60      	ldr	r3, [pc, #384]	; (8003558 <HAL_RCC_GetSysClockFreq+0x348>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	0c1b      	lsrs	r3, r3, #16
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	3301      	adds	r3, #1
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80033e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80033f8:	e0a6      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033fa:	4b57      	ldr	r3, [pc, #348]	; (8003558 <HAL_RCC_GetSysClockFreq+0x348>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003402:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003406:	4b54      	ldr	r3, [pc, #336]	; (8003558 <HAL_RCC_GetSysClockFreq+0x348>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d02a      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003412:	4b51      	ldr	r3, [pc, #324]	; (8003558 <HAL_RCC_GetSysClockFreq+0x348>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	2200      	movs	r2, #0
 800341a:	63bb      	str	r3, [r7, #56]	; 0x38
 800341c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800341e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003420:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003424:	2100      	movs	r1, #0
 8003426:	4b4e      	ldr	r3, [pc, #312]	; (8003560 <HAL_RCC_GetSysClockFreq+0x350>)
 8003428:	fb03 f201 	mul.w	r2, r3, r1
 800342c:	2300      	movs	r3, #0
 800342e:	fb00 f303 	mul.w	r3, r0, r3
 8003432:	4413      	add	r3, r2
 8003434:	4a4a      	ldr	r2, [pc, #296]	; (8003560 <HAL_RCC_GetSysClockFreq+0x350>)
 8003436:	fba0 1202 	umull	r1, r2, r0, r2
 800343a:	677a      	str	r2, [r7, #116]	; 0x74
 800343c:	460a      	mov	r2, r1
 800343e:	673a      	str	r2, [r7, #112]	; 0x70
 8003440:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003442:	4413      	add	r3, r2
 8003444:	677b      	str	r3, [r7, #116]	; 0x74
 8003446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800344a:	2200      	movs	r2, #0
 800344c:	633b      	str	r3, [r7, #48]	; 0x30
 800344e:	637a      	str	r2, [r7, #52]	; 0x34
 8003450:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003454:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003458:	f7fc ff2a 	bl	80002b0 <__aeabi_uldivmod>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4613      	mov	r3, r2
 8003462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003466:	e05b      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003468:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <HAL_RCC_GetSysClockFreq+0x348>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	099b      	lsrs	r3, r3, #6
 800346e:	2200      	movs	r2, #0
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
 8003472:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347a:	623b      	str	r3, [r7, #32]
 800347c:	2300      	movs	r3, #0
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
 8003480:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003484:	4642      	mov	r2, r8
 8003486:	464b      	mov	r3, r9
 8003488:	f04f 0000 	mov.w	r0, #0
 800348c:	f04f 0100 	mov.w	r1, #0
 8003490:	0159      	lsls	r1, r3, #5
 8003492:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003496:	0150      	lsls	r0, r2, #5
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4641      	mov	r1, r8
 800349e:	ebb2 0a01 	subs.w	sl, r2, r1
 80034a2:	4649      	mov	r1, r9
 80034a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034bc:	ebb2 040a 	subs.w	r4, r2, sl
 80034c0:	eb63 050b 	sbc.w	r5, r3, fp
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	00eb      	lsls	r3, r5, #3
 80034ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034d2:	00e2      	lsls	r2, r4, #3
 80034d4:	4614      	mov	r4, r2
 80034d6:	461d      	mov	r5, r3
 80034d8:	4643      	mov	r3, r8
 80034da:	18e3      	adds	r3, r4, r3
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	464b      	mov	r3, r9
 80034e0:	eb45 0303 	adc.w	r3, r5, r3
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034f2:	4629      	mov	r1, r5
 80034f4:	028b      	lsls	r3, r1, #10
 80034f6:	4621      	mov	r1, r4
 80034f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034fc:	4621      	mov	r1, r4
 80034fe:	028a      	lsls	r2, r1, #10
 8003500:	4610      	mov	r0, r2
 8003502:	4619      	mov	r1, r3
 8003504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003508:	2200      	movs	r2, #0
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	61fa      	str	r2, [r7, #28]
 800350e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003512:	f7fc fecd 	bl	80002b0 <__aeabi_uldivmod>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4613      	mov	r3, r2
 800351c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003520:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <HAL_RCC_GetSysClockFreq+0x348>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	0f1b      	lsrs	r3, r3, #28
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800352e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003532:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003536:	fbb2 f3f3 	udiv	r3, r2, r3
 800353a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800353e:	e003      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003542:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003546:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003548:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800354c:	4618      	mov	r0, r3
 800354e:	3798      	adds	r7, #152	; 0x98
 8003550:	46bd      	mov	sp, r7
 8003552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	00f42400 	.word	0x00f42400
 8003560:	017d7840 	.word	0x017d7840

08003564 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e28d      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 8083 	beq.w	800368a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003584:	4b94      	ldr	r3, [pc, #592]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b04      	cmp	r3, #4
 800358e:	d019      	beq.n	80035c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003590:	4b91      	ldr	r3, [pc, #580]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003598:	2b08      	cmp	r3, #8
 800359a:	d106      	bne.n	80035aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800359c:	4b8e      	ldr	r3, [pc, #568]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035a8:	d00c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035aa:	4b8b      	ldr	r3, [pc, #556]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035b2:	2b0c      	cmp	r3, #12
 80035b4:	d112      	bne.n	80035dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b6:	4b88      	ldr	r3, [pc, #544]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c2:	d10b      	bne.n	80035dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	4b84      	ldr	r3, [pc, #528]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d05b      	beq.n	8003688 <HAL_RCC_OscConfig+0x124>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d157      	bne.n	8003688 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e25a      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e4:	d106      	bne.n	80035f4 <HAL_RCC_OscConfig+0x90>
 80035e6:	4b7c      	ldr	r3, [pc, #496]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a7b      	ldr	r2, [pc, #492]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e01d      	b.n	8003630 <HAL_RCC_OscConfig+0xcc>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0xb4>
 80035fe:	4b76      	ldr	r3, [pc, #472]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a75      	ldr	r2, [pc, #468]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b73      	ldr	r3, [pc, #460]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a72      	ldr	r2, [pc, #456]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0xcc>
 8003618:	4b6f      	ldr	r3, [pc, #444]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a6e      	ldr	r2, [pc, #440]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 800361e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	4b6c      	ldr	r3, [pc, #432]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a6b      	ldr	r2, [pc, #428]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 800362a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fd fe94 	bl	8001364 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003640:	f7fd fe90 	bl	8001364 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e21f      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b61      	ldr	r3, [pc, #388]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0xdc>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fd fe80 	bl	8001364 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003668:	f7fd fe7c 	bl	8001364 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	; 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e20b      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367a:	4b57      	ldr	r3, [pc, #348]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x104>
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d06f      	beq.n	8003776 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003696:	4b50      	ldr	r3, [pc, #320]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d017      	beq.n	80036d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036a2:	4b4d      	ldr	r3, [pc, #308]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d105      	bne.n	80036ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036ae:	4b4a      	ldr	r3, [pc, #296]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ba:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d11c      	bne.n	8003700 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036c6:	4b44      	ldr	r3, [pc, #272]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d116      	bne.n	8003700 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d2:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_RCC_OscConfig+0x186>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d001      	beq.n	80036ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e1d3      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ea:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4937      	ldr	r1, [pc, #220]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fe:	e03a      	b.n	8003776 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d020      	beq.n	800374a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003708:	4b34      	ldr	r3, [pc, #208]	; (80037dc <HAL_RCC_OscConfig+0x278>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370e:	f7fd fe29 	bl	8001364 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003716:	f7fd fe25 	bl	8001364 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e1b4      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003728:	4b2b      	ldr	r3, [pc, #172]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003734:	4b28      	ldr	r3, [pc, #160]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4925      	ldr	r1, [pc, #148]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003744:	4313      	orrs	r3, r2
 8003746:	600b      	str	r3, [r1, #0]
 8003748:	e015      	b.n	8003776 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800374a:	4b24      	ldr	r3, [pc, #144]	; (80037dc <HAL_RCC_OscConfig+0x278>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fd fe08 	bl	8001364 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003758:	f7fd fe04 	bl	8001364 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e193      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376a:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d036      	beq.n	80037f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_RCC_OscConfig+0x27c>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7fd fde8 	bl	8001364 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003798:	f7fd fde4 	bl	8001364 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e173      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037aa:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80037ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x234>
 80037b6:	e01b      	b.n	80037f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fd fdd1 	bl	8001364 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c4:	e00e      	b.n	80037e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c6:	f7fd fdcd 	bl	8001364 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d907      	bls.n	80037e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e15c      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
 80037d8:	40023800 	.word	0x40023800
 80037dc:	42470000 	.word	0x42470000
 80037e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e4:	4b8a      	ldr	r3, [pc, #552]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80037e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1ea      	bne.n	80037c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8097 	beq.w	800392c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037fe:	2300      	movs	r3, #0
 8003800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003802:	4b83      	ldr	r3, [pc, #524]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10f      	bne.n	800382e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	4b7f      	ldr	r3, [pc, #508]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	4a7e      	ldr	r2, [pc, #504]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381c:	6413      	str	r3, [r2, #64]	; 0x40
 800381e:	4b7c      	ldr	r3, [pc, #496]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382a:	2301      	movs	r3, #1
 800382c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382e:	4b79      	ldr	r3, [pc, #484]	; (8003a14 <HAL_RCC_OscConfig+0x4b0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003836:	2b00      	cmp	r3, #0
 8003838:	d118      	bne.n	800386c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383a:	4b76      	ldr	r3, [pc, #472]	; (8003a14 <HAL_RCC_OscConfig+0x4b0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a75      	ldr	r2, [pc, #468]	; (8003a14 <HAL_RCC_OscConfig+0x4b0>)
 8003840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003846:	f7fd fd8d 	bl	8001364 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384e:	f7fd fd89 	bl	8001364 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e118      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003860:	4b6c      	ldr	r3, [pc, #432]	; (8003a14 <HAL_RCC_OscConfig+0x4b0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d106      	bne.n	8003882 <HAL_RCC_OscConfig+0x31e>
 8003874:	4b66      	ldr	r3, [pc, #408]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	4a65      	ldr	r2, [pc, #404]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6713      	str	r3, [r2, #112]	; 0x70
 8003880:	e01c      	b.n	80038bc <HAL_RCC_OscConfig+0x358>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b05      	cmp	r3, #5
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x340>
 800388a:	4b61      	ldr	r3, [pc, #388]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	4a60      	ldr	r2, [pc, #384]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	6713      	str	r3, [r2, #112]	; 0x70
 8003896:	4b5e      	ldr	r3, [pc, #376]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	4a5d      	ldr	r2, [pc, #372]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6713      	str	r3, [r2, #112]	; 0x70
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0x358>
 80038a4:	4b5a      	ldr	r3, [pc, #360]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a8:	4a59      	ldr	r2, [pc, #356]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	6713      	str	r3, [r2, #112]	; 0x70
 80038b0:	4b57      	ldr	r3, [pc, #348]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80038b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b4:	4a56      	ldr	r2, [pc, #344]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80038b6:	f023 0304 	bic.w	r3, r3, #4
 80038ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d015      	beq.n	80038f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fd fd4e 	bl	8001364 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038cc:	f7fd fd4a 	bl	8001364 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e0d7      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e2:	4b4b      	ldr	r3, [pc, #300]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0ee      	beq.n	80038cc <HAL_RCC_OscConfig+0x368>
 80038ee:	e014      	b.n	800391a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fd fd38 	bl	8001364 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f6:	e00a      	b.n	800390e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f8:	f7fd fd34 	bl	8001364 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	; 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e0c1      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800390e:	4b40      	ldr	r3, [pc, #256]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1ee      	bne.n	80038f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800391a:	7dfb      	ldrb	r3, [r7, #23]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003920:	4b3b      	ldr	r3, [pc, #236]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	4a3a      	ldr	r2, [pc, #232]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80ad 	beq.w	8003a90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003936:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b08      	cmp	r3, #8
 8003940:	d060      	beq.n	8003a04 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d145      	bne.n	80039d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394a:	4b33      	ldr	r3, [pc, #204]	; (8003a18 <HAL_RCC_OscConfig+0x4b4>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fd fd08 	bl	8001364 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003958:	f7fd fd04 	bl	8001364 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e093      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396a:	4b29      	ldr	r3, [pc, #164]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	019b      	lsls	r3, r3, #6
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	3b01      	subs	r3, #1
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	061b      	lsls	r3, r3, #24
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	071b      	lsls	r3, r3, #28
 80039a2:	491b      	ldr	r1, [pc, #108]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a8:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x4b4>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ae:	f7fd fcd9 	bl	8001364 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b6:	f7fd fcd5 	bl	8001364 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e064      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x452>
 80039d4:	e05c      	b.n	8003a90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <HAL_RCC_OscConfig+0x4b4>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fd fcc2 	bl	8001364 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e4:	f7fd fcbe 	bl	8001364 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e04d      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x480>
 8003a02:	e045      	b.n	8003a90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e040      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40007000 	.word	0x40007000
 8003a18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a1c:	4b1f      	ldr	r3, [pc, #124]	; (8003a9c <HAL_RCC_OscConfig+0x538>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d030      	beq.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d129      	bne.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d122      	bne.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d119      	bne.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	085b      	lsrs	r3, r3, #1
 8003a64:	3b01      	subs	r3, #1
 8003a66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d10f      	bne.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d107      	bne.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800

08003aa0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e066      	b.n	8003b84 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	7f5b      	ldrb	r3, [r3, #29]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d105      	bne.n	8003acc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fd fa06 	bl	8000ed8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	22ca      	movs	r2, #202	; 0xca
 8003ad8:	625a      	str	r2, [r3, #36]	; 0x24
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2253      	movs	r2, #83	; 0x53
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f87a 	bl	8003bdc <RTC_EnterInitMode>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d12c      	bne.n	8003b4c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b04:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6899      	ldr	r1, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	68d2      	ldr	r2, [r2, #12]
 8003b2c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6919      	ldr	r1, [r3, #16]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	041a      	lsls	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f881 	bl	8003c4a <RTC_ExitInitMode>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d113      	bne.n	8003b7a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699a      	ldr	r2, [r3, #24]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	22ff      	movs	r2, #255	; 0xff
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ba8:	f7fd fbdc 	bl	8001364 <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003bae:	e009      	b.n	8003bc4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bb0:	f7fd fbd8 	bl	8001364 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e007      	b.n	8003bd4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0ee      	beq.n	8003bb0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d122      	bne.n	8003c40 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c08:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c0a:	f7fd fbab 	bl	8001364 <HAL_GetTick>
 8003c0e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003c10:	e00c      	b.n	8003c2c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c12:	f7fd fba7 	bl	8001364 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c20:	d904      	bls.n	8003c2c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2204      	movs	r2, #4
 8003c26:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d102      	bne.n	8003c40 <RTC_EnterInitMode+0x64>
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d1e8      	bne.n	8003c12 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c64:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7ff ff89 	bl	8003b8c <HAL_RTC_WaitForSynchro>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d004      	beq.n	8003c8a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2204      	movs	r2, #4
 8003c84:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e041      	b.n	8003d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd f936 	bl	8000f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	f000 f9aa 	bl	800402c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e041      	b.n	8003dc8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d106      	bne.n	8003d5e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f839 	bl	8003dd0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f000 f95b 	bl	800402c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e048      	b.n	8003e94 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	d839      	bhi.n	8003e84 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003e10:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e4d 	.word	0x08003e4d
 8003e1c:	08003e85 	.word	0x08003e85
 8003e20:	08003e85 	.word	0x08003e85
 8003e24:	08003e85 	.word	0x08003e85
 8003e28:	08003e5b 	.word	0x08003e5b
 8003e2c:	08003e85 	.word	0x08003e85
 8003e30:	08003e85 	.word	0x08003e85
 8003e34:	08003e85 	.word	0x08003e85
 8003e38:	08003e69 	.word	0x08003e69
 8003e3c:	08003e85 	.word	0x08003e85
 8003e40:	08003e85 	.word	0x08003e85
 8003e44:	08003e85 	.word	0x08003e85
 8003e48:	08003e77 	.word	0x08003e77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 f98a 	bl	800416c <TIM_OC1_SetConfig>
      break;
 8003e58:	e017      	b.n	8003e8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 f9f3 	bl	800424c <TIM_OC2_SetConfig>
      break;
 8003e66:	e010      	b.n	8003e8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fa62 	bl	8004338 <TIM_OC3_SetConfig>
      break;
 8003e74:	e009      	b.n	8003e8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68b9      	ldr	r1, [r7, #8]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 facf 	bl	8004420 <TIM_OC4_SetConfig>
      break;
 8003e82:	e002      	b.n	8003e8a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	75fb      	strb	r3, [r7, #23]
      break;
 8003e88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e0b4      	b.n	8004022 <HAL_TIM_ConfigClockSource+0x186>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ede:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef0:	d03e      	beq.n	8003f70 <HAL_TIM_ConfigClockSource+0xd4>
 8003ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef6:	f200 8087 	bhi.w	8004008 <HAL_TIM_ConfigClockSource+0x16c>
 8003efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efe:	f000 8086 	beq.w	800400e <HAL_TIM_ConfigClockSource+0x172>
 8003f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f06:	d87f      	bhi.n	8004008 <HAL_TIM_ConfigClockSource+0x16c>
 8003f08:	2b70      	cmp	r3, #112	; 0x70
 8003f0a:	d01a      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0xa6>
 8003f0c:	2b70      	cmp	r3, #112	; 0x70
 8003f0e:	d87b      	bhi.n	8004008 <HAL_TIM_ConfigClockSource+0x16c>
 8003f10:	2b60      	cmp	r3, #96	; 0x60
 8003f12:	d050      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0x11a>
 8003f14:	2b60      	cmp	r3, #96	; 0x60
 8003f16:	d877      	bhi.n	8004008 <HAL_TIM_ConfigClockSource+0x16c>
 8003f18:	2b50      	cmp	r3, #80	; 0x50
 8003f1a:	d03c      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0xfa>
 8003f1c:	2b50      	cmp	r3, #80	; 0x50
 8003f1e:	d873      	bhi.n	8004008 <HAL_TIM_ConfigClockSource+0x16c>
 8003f20:	2b40      	cmp	r3, #64	; 0x40
 8003f22:	d058      	beq.n	8003fd6 <HAL_TIM_ConfigClockSource+0x13a>
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	d86f      	bhi.n	8004008 <HAL_TIM_ConfigClockSource+0x16c>
 8003f28:	2b30      	cmp	r3, #48	; 0x30
 8003f2a:	d064      	beq.n	8003ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8003f2c:	2b30      	cmp	r3, #48	; 0x30
 8003f2e:	d86b      	bhi.n	8004008 <HAL_TIM_ConfigClockSource+0x16c>
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d060      	beq.n	8003ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d867      	bhi.n	8004008 <HAL_TIM_ConfigClockSource+0x16c>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d05c      	beq.n	8003ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8003f3c:	2b10      	cmp	r3, #16
 8003f3e:	d05a      	beq.n	8003ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8003f40:	e062      	b.n	8004008 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6899      	ldr	r1, [r3, #8]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f000 fb35 	bl	80045c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	609a      	str	r2, [r3, #8]
      break;
 8003f6e:	e04f      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	6899      	ldr	r1, [r3, #8]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f000 fb1e 	bl	80045c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f92:	609a      	str	r2, [r3, #8]
      break;
 8003f94:	e03c      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	6859      	ldr	r1, [r3, #4]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	f000 fa92 	bl	80044cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2150      	movs	r1, #80	; 0x50
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 faeb 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8003fb4:	e02c      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6859      	ldr	r1, [r3, #4]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f000 fab1 	bl	800452a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2160      	movs	r1, #96	; 0x60
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fadb 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8003fd4:	e01c      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	6859      	ldr	r1, [r3, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f000 fa72 	bl	80044cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2140      	movs	r1, #64	; 0x40
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 facb 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8003ff4:	e00c      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f000 fac2 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8004006:	e003      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]
      break;
 800400c:	e000      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800400e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004020:	7bfb      	ldrb	r3, [r7, #15]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a40      	ldr	r2, [pc, #256]	; (8004140 <TIM_Base_SetConfig+0x114>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d013      	beq.n	800406c <TIM_Base_SetConfig+0x40>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404a:	d00f      	beq.n	800406c <TIM_Base_SetConfig+0x40>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a3d      	ldr	r2, [pc, #244]	; (8004144 <TIM_Base_SetConfig+0x118>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00b      	beq.n	800406c <TIM_Base_SetConfig+0x40>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a3c      	ldr	r2, [pc, #240]	; (8004148 <TIM_Base_SetConfig+0x11c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d007      	beq.n	800406c <TIM_Base_SetConfig+0x40>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a3b      	ldr	r2, [pc, #236]	; (800414c <TIM_Base_SetConfig+0x120>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_Base_SetConfig+0x40>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a3a      	ldr	r2, [pc, #232]	; (8004150 <TIM_Base_SetConfig+0x124>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d108      	bne.n	800407e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a2f      	ldr	r2, [pc, #188]	; (8004140 <TIM_Base_SetConfig+0x114>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d02b      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408c:	d027      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a2c      	ldr	r2, [pc, #176]	; (8004144 <TIM_Base_SetConfig+0x118>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d023      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a2b      	ldr	r2, [pc, #172]	; (8004148 <TIM_Base_SetConfig+0x11c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d01f      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a2a      	ldr	r2, [pc, #168]	; (800414c <TIM_Base_SetConfig+0x120>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d01b      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a29      	ldr	r2, [pc, #164]	; (8004150 <TIM_Base_SetConfig+0x124>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d017      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a28      	ldr	r2, [pc, #160]	; (8004154 <TIM_Base_SetConfig+0x128>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d013      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a27      	ldr	r2, [pc, #156]	; (8004158 <TIM_Base_SetConfig+0x12c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00f      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a26      	ldr	r2, [pc, #152]	; (800415c <TIM_Base_SetConfig+0x130>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00b      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a25      	ldr	r2, [pc, #148]	; (8004160 <TIM_Base_SetConfig+0x134>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d007      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a24      	ldr	r2, [pc, #144]	; (8004164 <TIM_Base_SetConfig+0x138>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d003      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a23      	ldr	r2, [pc, #140]	; (8004168 <TIM_Base_SetConfig+0x13c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d108      	bne.n	80040f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a0a      	ldr	r2, [pc, #40]	; (8004140 <TIM_Base_SetConfig+0x114>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <TIM_Base_SetConfig+0xf8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a0c      	ldr	r2, [pc, #48]	; (8004150 <TIM_Base_SetConfig+0x124>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d103      	bne.n	800412c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	615a      	str	r2, [r3, #20]
}
 8004132:	bf00      	nop
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40010000 	.word	0x40010000
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800
 800414c:	40000c00 	.word	0x40000c00
 8004150:	40010400 	.word	0x40010400
 8004154:	40014000 	.word	0x40014000
 8004158:	40014400 	.word	0x40014400
 800415c:	40014800 	.word	0x40014800
 8004160:	40001800 	.word	0x40001800
 8004164:	40001c00 	.word	0x40001c00
 8004168:	40002000 	.word	0x40002000

0800416c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f023 0201 	bic.w	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f023 0302 	bic.w	r3, r3, #2
 80041b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a20      	ldr	r2, [pc, #128]	; (8004244 <TIM_OC1_SetConfig+0xd8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <TIM_OC1_SetConfig+0x64>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a1f      	ldr	r2, [pc, #124]	; (8004248 <TIM_OC1_SetConfig+0xdc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d10c      	bne.n	80041ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f023 0308 	bic.w	r3, r3, #8
 80041d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f023 0304 	bic.w	r3, r3, #4
 80041e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a15      	ldr	r2, [pc, #84]	; (8004244 <TIM_OC1_SetConfig+0xd8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d003      	beq.n	80041fa <TIM_OC1_SetConfig+0x8e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a14      	ldr	r2, [pc, #80]	; (8004248 <TIM_OC1_SetConfig+0xdc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d111      	bne.n	800421e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	621a      	str	r2, [r3, #32]
}
 8004238:	bf00      	nop
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	40010000 	.word	0x40010000
 8004248:	40010400 	.word	0x40010400

0800424c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f023 0210 	bic.w	r2, r3, #16
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f023 0320 	bic.w	r3, r3, #32
 8004296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a22      	ldr	r2, [pc, #136]	; (8004330 <TIM_OC2_SetConfig+0xe4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_OC2_SetConfig+0x68>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a21      	ldr	r2, [pc, #132]	; (8004334 <TIM_OC2_SetConfig+0xe8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d10d      	bne.n	80042d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a17      	ldr	r2, [pc, #92]	; (8004330 <TIM_OC2_SetConfig+0xe4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_OC2_SetConfig+0x94>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a16      	ldr	r2, [pc, #88]	; (8004334 <TIM_OC2_SetConfig+0xe8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d113      	bne.n	8004308 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40010000 	.word	0x40010000
 8004334:	40010400 	.word	0x40010400

08004338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a21      	ldr	r2, [pc, #132]	; (8004418 <TIM_OC3_SetConfig+0xe0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d003      	beq.n	800439e <TIM_OC3_SetConfig+0x66>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a20      	ldr	r2, [pc, #128]	; (800441c <TIM_OC3_SetConfig+0xe4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d10d      	bne.n	80043ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a16      	ldr	r2, [pc, #88]	; (8004418 <TIM_OC3_SetConfig+0xe0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d003      	beq.n	80043ca <TIM_OC3_SetConfig+0x92>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a15      	ldr	r2, [pc, #84]	; (800441c <TIM_OC3_SetConfig+0xe4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d113      	bne.n	80043f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	621a      	str	r2, [r3, #32]
}
 800440c:	bf00      	nop
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	40010000 	.word	0x40010000
 800441c:	40010400 	.word	0x40010400

08004420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	021b      	lsls	r3, r3, #8
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800446a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	031b      	lsls	r3, r3, #12
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a12      	ldr	r2, [pc, #72]	; (80044c4 <TIM_OC4_SetConfig+0xa4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <TIM_OC4_SetConfig+0x68>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a11      	ldr	r2, [pc, #68]	; (80044c8 <TIM_OC4_SetConfig+0xa8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d109      	bne.n	800449c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800448e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	019b      	lsls	r3, r3, #6
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40010000 	.word	0x40010000
 80044c8:	40010400 	.word	0x40010400

080044cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	f023 0201 	bic.w	r2, r3, #1
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f023 030a 	bic.w	r3, r3, #10
 8004508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	621a      	str	r2, [r3, #32]
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800452a:	b480      	push	{r7}
 800452c:	b087      	sub	sp, #28
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f023 0210 	bic.w	r2, r3, #16
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004554:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	031b      	lsls	r3, r3, #12
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004566:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	621a      	str	r2, [r3, #32]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f043 0307 	orr.w	r3, r3, #7
 80045ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	609a      	str	r2, [r3, #8]
}
 80045b4:	bf00      	nop
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	021a      	lsls	r2, r3, #8
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	609a      	str	r2, [r3, #8]
}
 80045f4:	bf00      	nop
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004614:	2302      	movs	r3, #2
 8004616:	e05a      	b.n	80046ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a21      	ldr	r2, [pc, #132]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d022      	beq.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004664:	d01d      	beq.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1d      	ldr	r2, [pc, #116]	; (80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d018      	beq.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1b      	ldr	r2, [pc, #108]	; (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1a      	ldr	r2, [pc, #104]	; (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00e      	beq.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a18      	ldr	r2, [pc, #96]	; (80046ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d009      	beq.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a17      	ldr	r2, [pc, #92]	; (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d004      	beq.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10c      	bne.n	80046bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40010000 	.word	0x40010000
 80046e0:	40000400 	.word	0x40000400
 80046e4:	40000800 	.word	0x40000800
 80046e8:	40000c00 	.word	0x40000c00
 80046ec:	40010400 	.word	0x40010400
 80046f0:	40014000 	.word	0x40014000
 80046f4:	40001800 	.word	0x40001800

080046f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004710:	2302      	movs	r3, #2
 8004712:	e03d      	b.n	8004790 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e03f      	b.n	800482e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fc fc0e 	bl	8000fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2224      	movs	r2, #36	; 0x24
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f929 	bl	8004a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695a      	ldr	r2, [r3, #20]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004804:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004814:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b08a      	sub	sp, #40	; 0x28
 800483a:	af02      	add	r7, sp, #8
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	4613      	mov	r3, r2
 8004844:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b20      	cmp	r3, #32
 8004854:	d17c      	bne.n	8004950 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <HAL_UART_Transmit+0x2c>
 800485c:	88fb      	ldrh	r3, [r7, #6]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e075      	b.n	8004952 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_UART_Transmit+0x3e>
 8004870:	2302      	movs	r3, #2
 8004872:	e06e      	b.n	8004952 <HAL_UART_Transmit+0x11c>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2221      	movs	r2, #33	; 0x21
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800488a:	f7fc fd6b 	bl	8001364 <HAL_GetTick>
 800488e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	88fa      	ldrh	r2, [r7, #6]
 8004894:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	88fa      	ldrh	r2, [r7, #6]
 800489a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a4:	d108      	bne.n	80048b8 <HAL_UART_Transmit+0x82>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d104      	bne.n	80048b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	61bb      	str	r3, [r7, #24]
 80048b6:	e003      	b.n	80048c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048c8:	e02a      	b.n	8004920 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2200      	movs	r2, #0
 80048d2:	2180      	movs	r1, #128	; 0x80
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 f840 	bl	800495a <UART_WaitOnFlagUntilTimeout>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e036      	b.n	8004952 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10b      	bne.n	8004902 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	3302      	adds	r3, #2
 80048fe:	61bb      	str	r3, [r7, #24]
 8004900:	e007      	b.n	8004912 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	781a      	ldrb	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	3301      	adds	r3, #1
 8004910:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1cf      	bne.n	80048ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2200      	movs	r2, #0
 8004932:	2140      	movs	r1, #64	; 0x40
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f810 	bl	800495a <UART_WaitOnFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e006      	b.n	8004952 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	e000      	b.n	8004952 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004950:	2302      	movs	r3, #2
  }
}
 8004952:	4618      	mov	r0, r3
 8004954:	3720      	adds	r7, #32
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b090      	sub	sp, #64	; 0x40
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	4613      	mov	r3, r2
 8004968:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800496a:	e050      	b.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800496e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004972:	d04c      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0x30>
 800497a:	f7fc fcf3 	bl	8001364 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004986:	429a      	cmp	r2, r3
 8004988:	d241      	bcs.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	330c      	adds	r3, #12
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049aa:	637a      	str	r2, [r7, #52]	; 0x34
 80049ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e5      	bne.n	800498a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3314      	adds	r3, #20
 80049c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	613b      	str	r3, [r7, #16]
   return(result);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3314      	adds	r3, #20
 80049dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049de:	623a      	str	r2, [r7, #32]
 80049e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	69f9      	ldr	r1, [r7, #28]
 80049e4:	6a3a      	ldr	r2, [r7, #32]
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e5      	bne.n	80049be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e00f      	b.n	8004a2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4013      	ands	r3, r2
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	bf0c      	ite	eq
 8004a1e:	2301      	moveq	r3, #1
 8004a20:	2300      	movne	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d09f      	beq.n	800496c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3740      	adds	r7, #64	; 0x40
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a3c:	b0c0      	sub	sp, #256	; 0x100
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a54:	68d9      	ldr	r1, [r3, #12]
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	ea40 0301 	orr.w	r3, r0, r1
 8004a60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a90:	f021 010c 	bic.w	r1, r1, #12
 8004a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab2:	6999      	ldr	r1, [r3, #24]
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	ea40 0301 	orr.w	r3, r0, r1
 8004abe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	4b8f      	ldr	r3, [pc, #572]	; (8004d04 <UART_SetConfig+0x2cc>)
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d005      	beq.n	8004ad8 <UART_SetConfig+0xa0>
 8004acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	4b8d      	ldr	r3, [pc, #564]	; (8004d08 <UART_SetConfig+0x2d0>)
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d104      	bne.n	8004ae2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ad8:	f7fe f85c 	bl	8002b94 <HAL_RCC_GetPCLK2Freq>
 8004adc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ae0:	e003      	b.n	8004aea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ae2:	f7fe f843 	bl	8002b6c <HAL_RCC_GetPCLK1Freq>
 8004ae6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af4:	f040 810c 	bne.w	8004d10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afc:	2200      	movs	r2, #0
 8004afe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	462b      	mov	r3, r5
 8004b0e:	1891      	adds	r1, r2, r2
 8004b10:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b12:	415b      	adcs	r3, r3
 8004b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	eb12 0801 	adds.w	r8, r2, r1
 8004b20:	4629      	mov	r1, r5
 8004b22:	eb43 0901 	adc.w	r9, r3, r1
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b3a:	4690      	mov	r8, r2
 8004b3c:	4699      	mov	r9, r3
 8004b3e:	4623      	mov	r3, r4
 8004b40:	eb18 0303 	adds.w	r3, r8, r3
 8004b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b48:	462b      	mov	r3, r5
 8004b4a:	eb49 0303 	adc.w	r3, r9, r3
 8004b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b66:	460b      	mov	r3, r1
 8004b68:	18db      	adds	r3, r3, r3
 8004b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	eb42 0303 	adc.w	r3, r2, r3
 8004b72:	657b      	str	r3, [r7, #84]	; 0x54
 8004b74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b7c:	f7fb fb98 	bl	80002b0 <__aeabi_uldivmod>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4b61      	ldr	r3, [pc, #388]	; (8004d0c <UART_SetConfig+0x2d4>)
 8004b86:	fba3 2302 	umull	r2, r3, r3, r2
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	011c      	lsls	r4, r3, #4
 8004b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	1891      	adds	r1, r2, r2
 8004ba6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ba8:	415b      	adcs	r3, r3
 8004baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bb0:	4641      	mov	r1, r8
 8004bb2:	eb12 0a01 	adds.w	sl, r2, r1
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	eb43 0b01 	adc.w	fp, r3, r1
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bd0:	4692      	mov	sl, r2
 8004bd2:	469b      	mov	fp, r3
 8004bd4:	4643      	mov	r3, r8
 8004bd6:	eb1a 0303 	adds.w	r3, sl, r3
 8004bda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bde:	464b      	mov	r3, r9
 8004be0:	eb4b 0303 	adc.w	r3, fp, r3
 8004be4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bf4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	18db      	adds	r3, r3, r3
 8004c00:	643b      	str	r3, [r7, #64]	; 0x40
 8004c02:	4613      	mov	r3, r2
 8004c04:	eb42 0303 	adc.w	r3, r2, r3
 8004c08:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c12:	f7fb fb4d 	bl	80002b0 <__aeabi_uldivmod>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	4b3b      	ldr	r3, [pc, #236]	; (8004d0c <UART_SetConfig+0x2d4>)
 8004c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	2264      	movs	r2, #100	; 0x64
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	1acb      	subs	r3, r1, r3
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c32:	4b36      	ldr	r3, [pc, #216]	; (8004d0c <UART_SetConfig+0x2d4>)
 8004c34:	fba3 2302 	umull	r2, r3, r3, r2
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c40:	441c      	add	r4, r3
 8004c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c54:	4642      	mov	r2, r8
 8004c56:	464b      	mov	r3, r9
 8004c58:	1891      	adds	r1, r2, r2
 8004c5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c5c:	415b      	adcs	r3, r3
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c64:	4641      	mov	r1, r8
 8004c66:	1851      	adds	r1, r2, r1
 8004c68:	6339      	str	r1, [r7, #48]	; 0x30
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	414b      	adcs	r3, r1
 8004c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c7c:	4659      	mov	r1, fp
 8004c7e:	00cb      	lsls	r3, r1, #3
 8004c80:	4651      	mov	r1, sl
 8004c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c86:	4651      	mov	r1, sl
 8004c88:	00ca      	lsls	r2, r1, #3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4642      	mov	r2, r8
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c98:	464b      	mov	r3, r9
 8004c9a:	460a      	mov	r2, r1
 8004c9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004cb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cb8:	460b      	mov	r3, r1
 8004cba:	18db      	adds	r3, r3, r3
 8004cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	eb42 0303 	adc.w	r3, r2, r3
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cce:	f7fb faef 	bl	80002b0 <__aeabi_uldivmod>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <UART_SetConfig+0x2d4>)
 8004cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	2164      	movs	r1, #100	; 0x64
 8004ce0:	fb01 f303 	mul.w	r3, r1, r3
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	3332      	adds	r3, #50	; 0x32
 8004cea:	4a08      	ldr	r2, [pc, #32]	; (8004d0c <UART_SetConfig+0x2d4>)
 8004cec:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	f003 0207 	and.w	r2, r3, #7
 8004cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4422      	add	r2, r4
 8004cfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d00:	e105      	b.n	8004f0e <UART_SetConfig+0x4d6>
 8004d02:	bf00      	nop
 8004d04:	40011000 	.word	0x40011000
 8004d08:	40011400 	.word	0x40011400
 8004d0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d14:	2200      	movs	r2, #0
 8004d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d22:	4642      	mov	r2, r8
 8004d24:	464b      	mov	r3, r9
 8004d26:	1891      	adds	r1, r2, r2
 8004d28:	6239      	str	r1, [r7, #32]
 8004d2a:	415b      	adcs	r3, r3
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d32:	4641      	mov	r1, r8
 8004d34:	1854      	adds	r4, r2, r1
 8004d36:	4649      	mov	r1, r9
 8004d38:	eb43 0501 	adc.w	r5, r3, r1
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	00eb      	lsls	r3, r5, #3
 8004d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d4a:	00e2      	lsls	r2, r4, #3
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	461d      	mov	r5, r3
 8004d50:	4643      	mov	r3, r8
 8004d52:	18e3      	adds	r3, r4, r3
 8004d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d58:	464b      	mov	r3, r9
 8004d5a:	eb45 0303 	adc.w	r3, r5, r3
 8004d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d7e:	4629      	mov	r1, r5
 8004d80:	008b      	lsls	r3, r1, #2
 8004d82:	4621      	mov	r1, r4
 8004d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d88:	4621      	mov	r1, r4
 8004d8a:	008a      	lsls	r2, r1, #2
 8004d8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d90:	f7fb fa8e 	bl	80002b0 <__aeabi_uldivmod>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4b60      	ldr	r3, [pc, #384]	; (8004f1c <UART_SetConfig+0x4e4>)
 8004d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	011c      	lsls	r4, r3, #4
 8004da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004db0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004db4:	4642      	mov	r2, r8
 8004db6:	464b      	mov	r3, r9
 8004db8:	1891      	adds	r1, r2, r2
 8004dba:	61b9      	str	r1, [r7, #24]
 8004dbc:	415b      	adcs	r3, r3
 8004dbe:	61fb      	str	r3, [r7, #28]
 8004dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dc4:	4641      	mov	r1, r8
 8004dc6:	1851      	adds	r1, r2, r1
 8004dc8:	6139      	str	r1, [r7, #16]
 8004dca:	4649      	mov	r1, r9
 8004dcc:	414b      	adcs	r3, r1
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ddc:	4659      	mov	r1, fp
 8004dde:	00cb      	lsls	r3, r1, #3
 8004de0:	4651      	mov	r1, sl
 8004de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004de6:	4651      	mov	r1, sl
 8004de8:	00ca      	lsls	r2, r1, #3
 8004dea:	4610      	mov	r0, r2
 8004dec:	4619      	mov	r1, r3
 8004dee:	4603      	mov	r3, r0
 8004df0:	4642      	mov	r2, r8
 8004df2:	189b      	adds	r3, r3, r2
 8004df4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004df8:	464b      	mov	r3, r9
 8004dfa:	460a      	mov	r2, r1
 8004dfc:	eb42 0303 	adc.w	r3, r2, r3
 8004e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	008b      	lsls	r3, r1, #2
 8004e20:	4641      	mov	r1, r8
 8004e22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e26:	4641      	mov	r1, r8
 8004e28:	008a      	lsls	r2, r1, #2
 8004e2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e2e:	f7fb fa3f 	bl	80002b0 <__aeabi_uldivmod>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	4b39      	ldr	r3, [pc, #228]	; (8004f1c <UART_SetConfig+0x4e4>)
 8004e38:	fba3 1302 	umull	r1, r3, r3, r2
 8004e3c:	095b      	lsrs	r3, r3, #5
 8004e3e:	2164      	movs	r1, #100	; 0x64
 8004e40:	fb01 f303 	mul.w	r3, r1, r3
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	3332      	adds	r3, #50	; 0x32
 8004e4a:	4a34      	ldr	r2, [pc, #208]	; (8004f1c <UART_SetConfig+0x4e4>)
 8004e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e56:	441c      	add	r4, r3
 8004e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	673b      	str	r3, [r7, #112]	; 0x70
 8004e60:	677a      	str	r2, [r7, #116]	; 0x74
 8004e62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e66:	4642      	mov	r2, r8
 8004e68:	464b      	mov	r3, r9
 8004e6a:	1891      	adds	r1, r2, r2
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	415b      	adcs	r3, r3
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e76:	4641      	mov	r1, r8
 8004e78:	1851      	adds	r1, r2, r1
 8004e7a:	6039      	str	r1, [r7, #0]
 8004e7c:	4649      	mov	r1, r9
 8004e7e:	414b      	adcs	r3, r1
 8004e80:	607b      	str	r3, [r7, #4]
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e8e:	4659      	mov	r1, fp
 8004e90:	00cb      	lsls	r3, r1, #3
 8004e92:	4651      	mov	r1, sl
 8004e94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e98:	4651      	mov	r1, sl
 8004e9a:	00ca      	lsls	r2, r1, #3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	4642      	mov	r2, r8
 8004ea4:	189b      	adds	r3, r3, r2
 8004ea6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ea8:	464b      	mov	r3, r9
 8004eaa:	460a      	mov	r2, r1
 8004eac:	eb42 0303 	adc.w	r3, r2, r3
 8004eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	663b      	str	r3, [r7, #96]	; 0x60
 8004ebc:	667a      	str	r2, [r7, #100]	; 0x64
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004eca:	4649      	mov	r1, r9
 8004ecc:	008b      	lsls	r3, r1, #2
 8004ece:	4641      	mov	r1, r8
 8004ed0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ed4:	4641      	mov	r1, r8
 8004ed6:	008a      	lsls	r2, r1, #2
 8004ed8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004edc:	f7fb f9e8 	bl	80002b0 <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <UART_SetConfig+0x4e4>)
 8004ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	2164      	movs	r1, #100	; 0x64
 8004eee:	fb01 f303 	mul.w	r3, r1, r3
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	3332      	adds	r3, #50	; 0x32
 8004ef8:	4a08      	ldr	r2, [pc, #32]	; (8004f1c <UART_SetConfig+0x4e4>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	f003 020f 	and.w	r2, r3, #15
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4422      	add	r2, r4
 8004f0c:	609a      	str	r2, [r3, #8]
}
 8004f0e:	bf00      	nop
 8004f10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f14:	46bd      	mov	sp, r7
 8004f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f1a:	bf00      	nop
 8004f1c:	51eb851f 	.word	0x51eb851f

08004f20 <MainState_RunA_Vcall>:
/*
* Ops Definitions
*/
//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
static inline void MainState_RunA_Vcall(MainState_Type const * const param)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
	(*param->vptr->StateADC_MAIN)(param);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	4798      	blx	r3
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <MainState_RunB_Vcall>:

static inline void MainState_RunB_Vcall(MainState_Type const * const param)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
	(*param->vptr->StateBALANCE_MAIN)(param);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4798      	blx	r3
}
 8004f4c:	bf00      	nop
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <MainState_RunC_Vcall>:

static inline void MainState_RunC_Vcall(MainState_Type const * const param)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	(*param->vptr->StateCAN_MAIN)(param);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	4798      	blx	r3
}
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <MainState_CTOR>:
	 &MAIN_StateMachine
};


void MainState_CTOR( MainState_Type* const param )
{
 8004f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f72:	b091      	sub	sp, #68	; 0x44
 8004f74:	af0e      	add	r7, sp, #56	; 0x38
 8004f76:	6078      	str	r0, [r7, #4]
		&StateADC_MAIN,
		&StateBALANCE_MAIN,
		&StateCAN_MAIN
	};

	param->vptr = &vTable;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a0c      	ldr	r2, [pc, #48]	; (8004fac <MainState_CTOR+0x3c>)
 8004f7c:	601a      	str	r2, [r3, #0]

#if defined(BSP_DEBUG_MSG)
	System_StateDEBUG_CTOR(&_DEBUG, huart5);
 8004f7e:	4e0c      	ldr	r6, [pc, #48]	; (8004fb0 <MainState_CTOR+0x40>)
 8004f80:	466d      	mov	r5, sp
 8004f82:	f106 040c 	add.w	r4, r6, #12
 8004f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f96:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f9a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004f9e:	4805      	ldr	r0, [pc, #20]	; (8004fb4 <MainState_CTOR+0x44>)
 8004fa0:	f000 f952 	bl	8005248 <System_StateDEBUG_CTOR>
#endif

}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fac:	08005f88 	.word	0x08005f88
 8004fb0:	20000248 	.word	0x20000248
 8004fb4:	2000000c 	.word	0x2000000c

08004fb8 <System_StateADC_MAIN>:


void	System_StateADC_MAIN( MainState_Type* const modules[] )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
	MainState_RunA_Vcall( modules[ STATE_ADC_MAIN ] );
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff ffab 	bl	8004f20 <MainState_RunA_Vcall>
		MainState_RunA_Vcall( modules[ loopVal ] );
	}

	*/

}
 8004fca:	bf00      	nop
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <System_StateBALANCE_MAIN>:

void	System_StateBALANCE_MAIN( MainState_Type* const modules[] )
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
	MainState_RunB_Vcall( modules[ STATE_BALANCE_MAIN ] );
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff ffab 	bl	8004f3a <MainState_RunB_Vcall>
		MainState_RunA_Vcall( modules[ loopVal ] );
	}

	*/

}
 8004fe4:	bf00      	nop
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <System_StateCAN_MAIN>:

void	System_StateCAN_MAIN( MainState_Type* const modules[] )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	MainState_RunC_Vcall( modules[ STATE_CAN_MAIN ] );
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff ffab 	bl	8004f54 <MainState_RunC_Vcall>
		MainState_RunA_Vcall( modules[ loopVal ] );
	}

	*/

}
 8004ffe:	bf00      	nop
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <App_MAIN>:


void 	App_MAIN(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0

	MainState_CTOR(&MAIN_StateMachine);
 800500c:	4809      	ldr	r0, [pc, #36]	; (8005034 <App_MAIN+0x2c>)
 800500e:	f7ff ffaf 	bl	8004f70 <MainState_CTOR>

	while(1)
	{
		stateTable[MAINstate](sys_modules);
 8005012:	4b09      	ldr	r3, [pc, #36]	; (8005038 <App_MAIN+0x30>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	4b08      	ldr	r3, [pc, #32]	; (800503c <App_MAIN+0x34>)
 800501a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800501e:	4808      	ldr	r0, [pc, #32]	; (8005040 <App_MAIN+0x38>)
 8005020:	4798      	blx	r3

		/* TIM Base 1ms'de 1 artacaktır. */
		Clock++;
 8005022:	4b08      	ldr	r3, [pc, #32]	; (8005044 <App_MAIN+0x3c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3301      	adds	r3, #1
 8005028:	4a06      	ldr	r2, [pc, #24]	; (8005044 <App_MAIN+0x3c>)
 800502a:	6013      	str	r3, [r2, #0]

		/* @LATER: Uyku moduna gecip 100ms sonra uyanacak */
		HAL_Delay(100);
 800502c:	2064      	movs	r0, #100	; 0x64
 800502e:	f7fc f9a5 	bl	800137c <HAL_Delay>
		stateTable[MAINstate](sys_modules);
 8005032:	e7ee      	b.n	8005012 <App_MAIN+0xa>
 8005034:	20000478 	.word	0x20000478
 8005038:	20000470 	.word	0x20000470
 800503c:	20000090 	.word	0x20000090
 8005040:	08005f84 	.word	0x08005f84
 8005044:	20000448 	.word	0x20000448

08005048 <StateADC_MAIN>:

}


static void 	StateADC_MAIN( MainState_Type const * const param )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
	if( Clock == BALANCE_STATE_TICKTIME )
 8005050:	4b20      	ldr	r3, [pc, #128]	; (80050d4 <StateADC_MAIN+0x8c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b04      	cmp	r3, #4
 8005056:	d102      	bne.n	800505e <StateADC_MAIN+0x16>
	{
		 MAINstate = STATE_BALANCE;
 8005058:	4b1f      	ldr	r3, [pc, #124]	; (80050d8 <StateADC_MAIN+0x90>)
 800505a:	2201      	movs	r2, #1
 800505c:	701a      	strb	r2, [r3, #0]
	}

	time_adc.nowTime = HAL_GetTick();
 800505e:	f7fc f981 	bl	8001364 <HAL_GetTick>
 8005062:	4603      	mov	r3, r0
 8005064:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <StateADC_MAIN+0x94>)
 8005066:	6053      	str	r3, [r2, #4]
	time_adc.deltaTime = time_adc.nowTime - time_adc.prevTime ;
 8005068:	4b1c      	ldr	r3, [pc, #112]	; (80050dc <StateADC_MAIN+0x94>)
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <StateADC_MAIN+0x94>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507a:	4b18      	ldr	r3, [pc, #96]	; (80050dc <StateADC_MAIN+0x94>)
 800507c:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Debug Msg Before Running */
	_DEBUG.ops.System_StateDEBUG_MSG(&_DEBUG.obj, ADC_STATE_NAME, MSG_RUN);
 8005080:	4b17      	ldr	r3, [pc, #92]	; (80050e0 <StateADC_MAIN+0x98>)
 8005082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005084:	2200      	movs	r2, #0
 8005086:	4917      	ldr	r1, [pc, #92]	; (80050e4 <StateADC_MAIN+0x9c>)
 8005088:	4815      	ldr	r0, [pc, #84]	; (80050e0 <StateADC_MAIN+0x98>)
 800508a:	4798      	blx	r3

	//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
	// WDT_CLR(); /* Watchdog Clear Before State Processing */
	MAINstatus.Flag.adc = true ;
 800508c:	4a16      	ldr	r2, [pc, #88]	; (80050e8 <StateADC_MAIN+0xa0>)
 800508e:	7813      	ldrb	r3, [r2, #0]
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	7013      	strb	r3, [r2, #0]
	/* JUMP INTO ADC MODULE */

	MainADC();
 8005096:	f000 f9b7 	bl	8005408 <MainADC>

	/* BACK FROM ADC MODULE */
	MAINstatus.Flag.adc = false ;
 800509a:	4a13      	ldr	r2, [pc, #76]	; (80050e8 <StateADC_MAIN+0xa0>)
 800509c:	7813      	ldrb	r3, [r2, #0]
 800509e:	f36f 0300 	bfc	r3, #0, #1
 80050a2:	7013      	strb	r3, [r2, #0]
	// WDT_CLR(); /* Watchdog Clear After State Processing */
	//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

	/* Debug Msg Before Running */
	_DEBUG.ops.System_StateDEBUG_MSG(&_DEBUG.obj, ADC_STATE_NAME, MSG_END);
 80050a4:	4b0e      	ldr	r3, [pc, #56]	; (80050e0 <StateADC_MAIN+0x98>)
 80050a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050a8:	2207      	movs	r2, #7
 80050aa:	490e      	ldr	r1, [pc, #56]	; (80050e4 <StateADC_MAIN+0x9c>)
 80050ac:	480c      	ldr	r0, [pc, #48]	; (80050e0 <StateADC_MAIN+0x98>)
 80050ae:	4798      	blx	r3

	time_adc.deltaTime /= 100;
 80050b0:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <StateADC_MAIN+0x94>)
 80050b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80050b6:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80050ec <StateADC_MAIN+0xa4>
 80050ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050be:	4b07      	ldr	r3, [pc, #28]	; (80050dc <StateADC_MAIN+0x94>)
 80050c0:	edc3 7a02 	vstr	s15, [r3, #8]
	time_adc.prevTime = time_adc.nowTime;
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <StateADC_MAIN+0x94>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4a04      	ldr	r2, [pc, #16]	; (80050dc <StateADC_MAIN+0x94>)
 80050ca:	6013      	str	r3, [r2, #0]


}
 80050cc:	bf00      	nop
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000448 	.word	0x20000448
 80050d8:	20000470 	.word	0x20000470
 80050dc:	2000044c 	.word	0x2000044c
 80050e0:	2000000c 	.word	0x2000000c
 80050e4:	08005f24 	.word	0x08005f24
 80050e8:	20000474 	.word	0x20000474
 80050ec:	42c80000 	.word	0x42c80000

080050f0 <StateBALANCE_MAIN>:

static void 	StateBALANCE_MAIN( MainState_Type const * const param )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	if( Clock == CAN_STATE_TICKTIME )
 80050f8:	4b20      	ldr	r3, [pc, #128]	; (800517c <StateBALANCE_MAIN+0x8c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d102      	bne.n	8005106 <StateBALANCE_MAIN+0x16>
	{
		  MAINstate = STATE_CAN;
 8005100:	4b1f      	ldr	r3, [pc, #124]	; (8005180 <StateBALANCE_MAIN+0x90>)
 8005102:	2202      	movs	r2, #2
 8005104:	701a      	strb	r2, [r3, #0]
	}

	time_balance.nowTime = HAL_GetTick();
 8005106:	f7fc f92d 	bl	8001364 <HAL_GetTick>
 800510a:	4603      	mov	r3, r0
 800510c:	4a1d      	ldr	r2, [pc, #116]	; (8005184 <StateBALANCE_MAIN+0x94>)
 800510e:	6053      	str	r3, [r2, #4]
	time_balance.deltaTime = time_balance.nowTime - time_balance.prevTime ;
 8005110:	4b1c      	ldr	r3, [pc, #112]	; (8005184 <StateBALANCE_MAIN+0x94>)
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	4b1b      	ldr	r3, [pc, #108]	; (8005184 <StateBALANCE_MAIN+0x94>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005122:	4b18      	ldr	r3, [pc, #96]	; (8005184 <StateBALANCE_MAIN+0x94>)
 8005124:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Debug Msg Before Running */
	_DEBUG.ops.System_StateDEBUG_MSG(&_DEBUG.obj, BALANCE_STATE_NAME, MSG_RUN);
 8005128:	4b17      	ldr	r3, [pc, #92]	; (8005188 <StateBALANCE_MAIN+0x98>)
 800512a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800512c:	2200      	movs	r2, #0
 800512e:	4917      	ldr	r1, [pc, #92]	; (800518c <StateBALANCE_MAIN+0x9c>)
 8005130:	4815      	ldr	r0, [pc, #84]	; (8005188 <StateBALANCE_MAIN+0x98>)
 8005132:	4798      	blx	r3

	//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
	// WDT_CLR(); /* Watchdog Clear Before State Processing */
	MAINstatus.Flag.balance = true ;
 8005134:	4a16      	ldr	r2, [pc, #88]	; (8005190 <StateBALANCE_MAIN+0xa0>)
 8005136:	7813      	ldrb	r3, [r2, #0]
 8005138:	f043 0302 	orr.w	r3, r3, #2
 800513c:	7013      	strb	r3, [r2, #0]
	/* JUMP INTO BALANCE MODULE */

	MainBALANCE();
 800513e:	f000 f9ab 	bl	8005498 <MainBALANCE>

	/* BACK FROM BALANCE MODULE */
	// WDT_CLR(); /* Watchdog Clear After State Processing */
	MAINstatus.Flag.balance = false ;
 8005142:	4a13      	ldr	r2, [pc, #76]	; (8005190 <StateBALANCE_MAIN+0xa0>)
 8005144:	7813      	ldrb	r3, [r2, #0]
 8005146:	f36f 0341 	bfc	r3, #1, #1
 800514a:	7013      	strb	r3, [r2, #0]
	//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

	/* Debug Msg After Running */
	_DEBUG.ops.System_StateDEBUG_MSG(&_DEBUG.obj, BALANCE_STATE_NAME, MSG_END);
 800514c:	4b0e      	ldr	r3, [pc, #56]	; (8005188 <StateBALANCE_MAIN+0x98>)
 800514e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005150:	2207      	movs	r2, #7
 8005152:	490e      	ldr	r1, [pc, #56]	; (800518c <StateBALANCE_MAIN+0x9c>)
 8005154:	480c      	ldr	r0, [pc, #48]	; (8005188 <StateBALANCE_MAIN+0x98>)
 8005156:	4798      	blx	r3

	time_balance.deltaTime /= 100;
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <StateBALANCE_MAIN+0x94>)
 800515a:	ed93 7a02 	vldr	s14, [r3, #8]
 800515e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8005194 <StateBALANCE_MAIN+0xa4>
 8005162:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005166:	4b07      	ldr	r3, [pc, #28]	; (8005184 <StateBALANCE_MAIN+0x94>)
 8005168:	edc3 7a02 	vstr	s15, [r3, #8]
	time_balance.prevTime = time_balance.nowTime;
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <StateBALANCE_MAIN+0x94>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4a04      	ldr	r2, [pc, #16]	; (8005184 <StateBALANCE_MAIN+0x94>)
 8005172:	6013      	str	r3, [r2, #0]

}
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	20000448 	.word	0x20000448
 8005180:	20000470 	.word	0x20000470
 8005184:	20000458 	.word	0x20000458
 8005188:	2000000c 	.word	0x2000000c
 800518c:	08005f34 	.word	0x08005f34
 8005190:	20000474 	.word	0x20000474
 8005194:	42c80000 	.word	0x42c80000

08005198 <StateCAN_MAIN>:

static void 	StateCAN_MAIN( MainState_Type const * const param )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	if( Clock == TOTAL_TICKTIME )
 80051a0:	4b22      	ldr	r3, [pc, #136]	; (800522c <StateCAN_MAIN+0x94>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b0a      	cmp	r3, #10
 80051a6:	d105      	bne.n	80051b4 <StateCAN_MAIN+0x1c>
	{
		Clock = ADC_STATE_TICKTIME;
 80051a8:	4b20      	ldr	r3, [pc, #128]	; (800522c <StateCAN_MAIN+0x94>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
		MAINstate = STATE_ADC;
 80051ae:	4b20      	ldr	r3, [pc, #128]	; (8005230 <StateCAN_MAIN+0x98>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
	}

	time_can.nowTime = HAL_GetTick();
 80051b4:	f7fc f8d6 	bl	8001364 <HAL_GetTick>
 80051b8:	4603      	mov	r3, r0
 80051ba:	4a1e      	ldr	r2, [pc, #120]	; (8005234 <StateCAN_MAIN+0x9c>)
 80051bc:	6053      	str	r3, [r2, #4]
	time_can.deltaTime = time_can.nowTime - time_can.prevTime ;
 80051be:	4b1d      	ldr	r3, [pc, #116]	; (8005234 <StateCAN_MAIN+0x9c>)
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	4b1c      	ldr	r3, [pc, #112]	; (8005234 <StateCAN_MAIN+0x9c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	ee07 3a90 	vmov	s15, r3
 80051cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d0:	4b18      	ldr	r3, [pc, #96]	; (8005234 <StateCAN_MAIN+0x9c>)
 80051d2:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Debug Msg Before Running */
	_DEBUG.ops.System_StateDEBUG_MSG(&_DEBUG.obj, CAN_STATE_NAME, MSG_RUN);
 80051d6:	4b18      	ldr	r3, [pc, #96]	; (8005238 <StateCAN_MAIN+0xa0>)
 80051d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051da:	2200      	movs	r2, #0
 80051dc:	4917      	ldr	r1, [pc, #92]	; (800523c <StateCAN_MAIN+0xa4>)
 80051de:	4816      	ldr	r0, [pc, #88]	; (8005238 <StateCAN_MAIN+0xa0>)
 80051e0:	4798      	blx	r3

	//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
	MAINstatus.Flag.can = true ;
 80051e2:	4a17      	ldr	r2, [pc, #92]	; (8005240 <StateCAN_MAIN+0xa8>)
 80051e4:	7813      	ldrb	r3, [r2, #0]
 80051e6:	f043 0304 	orr.w	r3, r3, #4
 80051ea:	7013      	strb	r3, [r2, #0]
	// WDT_CLR(); /* Watchdog Clear Before State Processing */
	/* JUMP INTO CAN MODULE */

	MainCAN();
 80051ec:	f000 f99a 	bl	8005524 <MainCAN>

	/* BACK FROM CAN MODULE */
	MAINstatus.Flag.can = false ;
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <StateCAN_MAIN+0xa8>)
 80051f2:	7813      	ldrb	r3, [r2, #0]
 80051f4:	f36f 0382 	bfc	r3, #2, #1
 80051f8:	7013      	strb	r3, [r2, #0]
	// WDT_CLR(); /* Watchdog Clear After State Processing */
	//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

	/* Debug Msg After Running */
	_DEBUG.ops.System_StateDEBUG_MSG(&_DEBUG.obj, CAN_STATE_NAME, MSG_END);
 80051fa:	4b0f      	ldr	r3, [pc, #60]	; (8005238 <StateCAN_MAIN+0xa0>)
 80051fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051fe:	2207      	movs	r2, #7
 8005200:	490e      	ldr	r1, [pc, #56]	; (800523c <StateCAN_MAIN+0xa4>)
 8005202:	480d      	ldr	r0, [pc, #52]	; (8005238 <StateCAN_MAIN+0xa0>)
 8005204:	4798      	blx	r3

	time_can.deltaTime /= 100;
 8005206:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <StateCAN_MAIN+0x9c>)
 8005208:	ed93 7a02 	vldr	s14, [r3, #8]
 800520c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8005244 <StateCAN_MAIN+0xac>
 8005210:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005214:	4b07      	ldr	r3, [pc, #28]	; (8005234 <StateCAN_MAIN+0x9c>)
 8005216:	edc3 7a02 	vstr	s15, [r3, #8]
	time_can.prevTime = time_can.nowTime;
 800521a:	4b06      	ldr	r3, [pc, #24]	; (8005234 <StateCAN_MAIN+0x9c>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	4a05      	ldr	r2, [pc, #20]	; (8005234 <StateCAN_MAIN+0x9c>)
 8005220:	6013      	str	r3, [r2, #0]
}
 8005222:	bf00      	nop
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20000448 	.word	0x20000448
 8005230:	20000470 	.word	0x20000470
 8005234:	20000464 	.word	0x20000464
 8005238:	2000000c 	.word	0x2000000c
 800523c:	08005f48 	.word	0x08005f48
 8005240:	20000474 	.word	0x20000474
 8005244:	42c80000 	.word	0x42c80000

08005248 <System_StateDEBUG_CTOR>:

#include "app.h"
#include "debug.h"

void System_StateDEBUG_CTOR(DEBUG_Type* param, UART_HandleTypeDef _huart )
{
 8005248:	b084      	sub	sp, #16
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	f107 0014 	add.w	r0, r7, #20
 8005256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	static const DEBUG_Ops_Type Vptr = {
			System_StateDEBUG_MSG 	,
			System_SetDEBUG_Status	,
			System_GetDEBUG_Status
	};
	param->ops = Vptr;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a09      	ldr	r2, [pc, #36]	; (8005284 <System_StateDEBUG_CTOR+0x3c>)
 800525e:	3378      	adds	r3, #120	; 0x78
 8005260:	ca07      	ldmia	r2, {r0, r1, r2}
 8005262:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	param->obj.huart = _huart;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4618      	mov	r0, r3
 800526a:	f107 0314 	add.w	r3, r7, #20
 800526e:	2244      	movs	r2, #68	; 0x44
 8005270:	4619      	mov	r1, r3
 8005272:	f000 f9d7 	bl	8005624 <memcpy>
}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005280:	b004      	add	sp, #16
 8005282:	4770      	bx	lr
 8005284:	08005f94 	.word	0x08005f94

08005288 <System_StateDEBUG_MSG>:



int  System_StateDEBUG_MSG (DEBUG_Obj_Type* param , char* msg , int state)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]


	HAL_StatusTypeDef result = HAL_OK;
 8005294:	2300      	movs	r3, #0
 8005296:	75fb      	strb	r3, [r7, #23]
		if( result != HAL_OK ) return -1;
		return -2;
	}
	else
	{
		param->stateMsgHandle  = (char*)malloc( sizeof(DEBUG_MSG_SIZE) );
 8005298:	2004      	movs	r0, #4
 800529a:	f000 f9b3 	bl	8005604 <malloc>
 800529e:	4603      	mov	r3, r0
 80052a0:	461a      	mov	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	649a      	str	r2, [r3, #72]	; 0x48
		param->statusMsgHandle = (char*)malloc( sizeof(DEBUG_TAG_SIZE) );
 80052a6:	2004      	movs	r0, #4
 80052a8:	f000 f9ac 	bl	8005604 <malloc>
 80052ac:	4603      	mov	r3, r0
 80052ae:	461a      	mov	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	64da      	str	r2, [r3, #76]	; 0x4c

		switch(state)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b07      	cmp	r3, #7
 80052b8:	d85a      	bhi.n	8005370 <System_StateDEBUG_MSG+0xe8>
 80052ba:	a201      	add	r2, pc, #4	; (adr r2, 80052c0 <System_StateDEBUG_MSG+0x38>)
 80052bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c0:	080052e1 	.word	0x080052e1
 80052c4:	080052f3 	.word	0x080052f3
 80052c8:	08005305 	.word	0x08005305
 80052cc:	08005317 	.word	0x08005317
 80052d0:	08005329 	.word	0x08005329
 80052d4:	0800533b 	.word	0x0800533b
 80052d8:	0800534d 	.word	0x0800534d
 80052dc:	0800535f 	.word	0x0800535f
		{
			case DEBUG_MSG_RUN		: sprintf(param->statusMsgHandle, "%s" , &param->DEBUG_CONSTS[DEBUG_MSG_RUN	 	][0]); break;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3350      	adds	r3, #80	; 0x50
 80052e8:	461a      	mov	r2, r3
 80052ea:	4935      	ldr	r1, [pc, #212]	; (80053c0 <System_StateDEBUG_MSG+0x138>)
 80052ec:	f000 fc34 	bl	8005b58 <siprintf>
 80052f0:	e03f      	b.n	8005372 <System_StateDEBUG_MSG+0xea>
			case DEBUG_MSG_IDLE		: sprintf(param->statusMsgHandle, "%s" , &param->DEBUG_CONSTS[DEBUG_MSG_IDLE	][0]); break;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3355      	adds	r3, #85	; 0x55
 80052fa:	461a      	mov	r2, r3
 80052fc:	4930      	ldr	r1, [pc, #192]	; (80053c0 <System_StateDEBUG_MSG+0x138>)
 80052fe:	f000 fc2b 	bl	8005b58 <siprintf>
 8005302:	e036      	b.n	8005372 <System_StateDEBUG_MSG+0xea>
			case DEBUG_MSG_ROUTINE	: sprintf(param->statusMsgHandle, "%s" , &param->DEBUG_CONSTS[DEBUG_MSG_ROUTINE	][0]); break;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	335a      	adds	r3, #90	; 0x5a
 800530c:	461a      	mov	r2, r3
 800530e:	492c      	ldr	r1, [pc, #176]	; (80053c0 <System_StateDEBUG_MSG+0x138>)
 8005310:	f000 fc22 	bl	8005b58 <siprintf>
 8005314:	e02d      	b.n	8005372 <System_StateDEBUG_MSG+0xea>
			case DEBUG_MSG_PROCESS	: sprintf(param->statusMsgHandle, "%s" , &param->DEBUG_CONSTS[DEBUG_MSG_PROCESS	][0]); break;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	335f      	adds	r3, #95	; 0x5f
 800531e:	461a      	mov	r2, r3
 8005320:	4927      	ldr	r1, [pc, #156]	; (80053c0 <System_StateDEBUG_MSG+0x138>)
 8005322:	f000 fc19 	bl	8005b58 <siprintf>
 8005326:	e024      	b.n	8005372 <System_StateDEBUG_MSG+0xea>
			case DEBUG_MSG_SUSPEND	: sprintf(param->statusMsgHandle, "%s" , &param->DEBUG_CONSTS[DEBUG_MSG_SUSPEND	][0]); break;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3364      	adds	r3, #100	; 0x64
 8005330:	461a      	mov	r2, r3
 8005332:	4923      	ldr	r1, [pc, #140]	; (80053c0 <System_StateDEBUG_MSG+0x138>)
 8005334:	f000 fc10 	bl	8005b58 <siprintf>
 8005338:	e01b      	b.n	8005372 <System_StateDEBUG_MSG+0xea>
			case DEBUG_MSG_ERR		: sprintf(param->statusMsgHandle, "%s" , &param->DEBUG_CONSTS[DEBUG_MSG_ERR	 	][0]); break;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3369      	adds	r3, #105	; 0x69
 8005342:	461a      	mov	r2, r3
 8005344:	491e      	ldr	r1, [pc, #120]	; (80053c0 <System_StateDEBUG_MSG+0x138>)
 8005346:	f000 fc07 	bl	8005b58 <siprintf>
 800534a:	e012      	b.n	8005372 <System_StateDEBUG_MSG+0xea>
			case DEBUG_MSG_EOK		: sprintf(param->statusMsgHandle, "%s" , &param->DEBUG_CONSTS[DEBUG_MSG_EOK	 	][0]); break;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	336e      	adds	r3, #110	; 0x6e
 8005354:	461a      	mov	r2, r3
 8005356:	491a      	ldr	r1, [pc, #104]	; (80053c0 <System_StateDEBUG_MSG+0x138>)
 8005358:	f000 fbfe 	bl	8005b58 <siprintf>
 800535c:	e009      	b.n	8005372 <System_StateDEBUG_MSG+0xea>
			case DEBUG_MSG_END		: sprintf(param->statusMsgHandle, "%s" , &param->DEBUG_CONSTS[DEBUG_MSG_END    	][0]); break;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	3373      	adds	r3, #115	; 0x73
 8005366:	461a      	mov	r2, r3
 8005368:	4915      	ldr	r1, [pc, #84]	; (80053c0 <System_StateDEBUG_MSG+0x138>)
 800536a:	f000 fbf5 	bl	8005b58 <siprintf>
 800536e:	e000      	b.n	8005372 <System_StateDEBUG_MSG+0xea>

			default: break;
 8005370:	bf00      	nop
		}

		sprintf( param->stateMsgHandle, "DBG: %s %s \n\r" , msg , param->statusMsgHandle );
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	4911      	ldr	r1, [pc, #68]	; (80053c4 <System_StateDEBUG_MSG+0x13c>)
 800537e:	f000 fbeb 	bl	8005b58 <siprintf>

		result = HAL_UART_Transmit(&huart5, (uint8_t*)param->stateMsgHandle, DEBUG_MSG_SIZE, 10);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005386:	230a      	movs	r3, #10
 8005388:	2232      	movs	r2, #50	; 0x32
 800538a:	480f      	ldr	r0, [pc, #60]	; (80053c8 <System_StateDEBUG_MSG+0x140>)
 800538c:	f7ff fa53 	bl	8004836 <HAL_UART_Transmit>
 8005390:	4603      	mov	r3, r0
 8005392:	75fb      	strb	r3, [r7, #23]
		/* Free first */

		free(param->statusMsgHandle);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005398:	4618      	mov	r0, r3
 800539a:	f000 f93b 	bl	8005614 <free>
		free(param->stateMsgHandle);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 f936 	bl	8005614 <free>

		if( result != HAL_OK ) return -1;
 80053a8:	7dfb      	ldrb	r3, [r7, #23]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <System_StateDEBUG_MSG+0x12c>
 80053ae:	f04f 33ff 	mov.w	r3, #4294967295
 80053b2:	e000      	b.n	80053b6 <System_StateDEBUG_MSG+0x12e>
	}

	return 0;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	08005f58 	.word	0x08005f58
 80053c4:	08005f5c 	.word	0x08005f5c
 80053c8:	20000248 	.word	0x20000248

080053cc <System_SetDEBUG_Status>:


void				System_SetDEBUG_Status		(DEBUG_Obj_Type* param, DEBUG_Status_Type status)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	70fb      	strb	r3, [r7, #3]
	param->status = status;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	78fa      	ldrb	r2, [r7, #3]
 80053dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <System_GetDEBUG_Status>:

DEBUG_Status_Type	System_GetDEBUG_Status		(DEBUG_Obj_Type* param)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	return param->status;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
	...

08005408 <MainADC>:

	return result;
}

void MainADC(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
	adc_err_t result = ADC_EOK;
 800540e:	2300      	movs	r3, #0
 8005410:	71fb      	strb	r3, [r7, #7]

	switch(AdcModule_MAINState)
 8005412:	4b1f      	ldr	r3, [pc, #124]	; (8005490 <MainADC+0x88>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2b04      	cmp	r3, #4
 8005418:	d82f      	bhi.n	800547a <MainADC+0x72>
 800541a:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <MainADC+0x18>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005435 	.word	0x08005435
 8005424:	08005443 	.word	0x08005443
 8005428:	08005451 	.word	0x08005451
 800542c:	0800545f 	.word	0x0800545f
 8005430:	0800546d 	.word	0x0800546d
	{
		/* Init State Operations */
		case AdcModule_MAINState_INIT	 : result = AdcModule.Ops.INIT(&AdcModule.Obj);
 8005434:	4b17      	ldr	r3, [pc, #92]	; (8005494 <MainADC+0x8c>)
 8005436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005438:	4816      	ldr	r0, [pc, #88]	; (8005494 <MainADC+0x8c>)
 800543a:	4798      	blx	r3
 800543c:	4603      	mov	r3, r0
 800543e:	71fb      	strb	r3, [r7, #7]
			break;
 8005440:	e01e      	b.n	8005480 <MainADC+0x78>
		/* Idle State Operations */
		case AdcModule_MAINState_IDLE	 : result = AdcModule.Ops.IDLE(&AdcModule.Obj);
 8005442:	4b14      	ldr	r3, [pc, #80]	; (8005494 <MainADC+0x8c>)
 8005444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005446:	4813      	ldr	r0, [pc, #76]	; (8005494 <MainADC+0x8c>)
 8005448:	4798      	blx	r3
 800544a:	4603      	mov	r3, r0
 800544c:	71fb      	strb	r3, [r7, #7]
			break;
 800544e:	e017      	b.n	8005480 <MainADC+0x78>
		/* Routine State Operations */
		case AdcModule_MAINState_ROUTINE: result = AdcModule.Ops.ROUTINE(&AdcModule.Obj);
 8005450:	4b10      	ldr	r3, [pc, #64]	; (8005494 <MainADC+0x8c>)
 8005452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005454:	480f      	ldr	r0, [pc, #60]	; (8005494 <MainADC+0x8c>)
 8005456:	4798      	blx	r3
 8005458:	4603      	mov	r3, r0
 800545a:	71fb      	strb	r3, [r7, #7]
			break;
 800545c:	e010      	b.n	8005480 <MainADC+0x78>
		/* Process State Operations */
		case AdcModule_MAINState_PROCESS: result = AdcModule.Ops.PROCESS(&AdcModule.Obj);
 800545e:	4b0d      	ldr	r3, [pc, #52]	; (8005494 <MainADC+0x8c>)
 8005460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005462:	480c      	ldr	r0, [pc, #48]	; (8005494 <MainADC+0x8c>)
 8005464:	4798      	blx	r3
 8005466:	4603      	mov	r3, r0
 8005468:	71fb      	strb	r3, [r7, #7]
			break;
 800546a:	e009      	b.n	8005480 <MainADC+0x78>
		/* Suspend State Operations */
		case AdcModule_MAINState_SUSPEND: result = AdcModule.Ops.SUSPEND(&AdcModule.Obj);
 800546c:	4b09      	ldr	r3, [pc, #36]	; (8005494 <MainADC+0x8c>)
 800546e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005470:	4808      	ldr	r0, [pc, #32]	; (8005494 <MainADC+0x8c>)
 8005472:	4798      	blx	r3
 8005474:	4603      	mov	r3, r0
 8005476:	71fb      	strb	r3, [r7, #7]
			break;
 8005478:	e002      	b.n	8005480 <MainADC+0x78>

		/* Error State Operations */
		default: result = ADC_ERR; break;
 800547a:	2301      	movs	r3, #1
 800547c:	71fb      	strb	r3, [r7, #7]
 800547e:	bf00      	nop
	}

	if( result != ADC_EOK) for(;;); /* Infinite Loop until WDT Reset */
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d000      	beq.n	8005488 <MainADC+0x80>
 8005486:	e7fe      	b.n	8005486 <MainADC+0x7e>

}
 8005488:	bf00      	nop
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	2000047c 	.word	0x2000047c
 8005494:	20000480 	.word	0x20000480

08005498 <MainBALANCE>:

	return result;
}

void MainBALANCE(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
	balance_err_t result = BALANCE_EOK;
 800549e:	2300      	movs	r3, #0
 80054a0:	71fb      	strb	r3, [r7, #7]

	switch(BalanceModule_MAINState)
 80054a2:	4b1e      	ldr	r3, [pc, #120]	; (800551c <MainBALANCE+0x84>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d82f      	bhi.n	800550a <MainBALANCE+0x72>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <MainBALANCE+0x18>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054c5 	.word	0x080054c5
 80054b4:	080054d3 	.word	0x080054d3
 80054b8:	080054e1 	.word	0x080054e1
 80054bc:	080054ef 	.word	0x080054ef
 80054c0:	080054fd 	.word	0x080054fd
	{
		/* Init State Operations */
		case BalanceModule_MAINState_INIT	 : result = BalanceModule.Ops.BalanceModule_INIT(&BalanceModule.Obj);
 80054c4:	4b16      	ldr	r3, [pc, #88]	; (8005520 <MainBALANCE+0x88>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4815      	ldr	r0, [pc, #84]	; (8005520 <MainBALANCE+0x88>)
 80054ca:	4798      	blx	r3
 80054cc:	4603      	mov	r3, r0
 80054ce:	71fb      	strb	r3, [r7, #7]
			break;
 80054d0:	e01c      	b.n	800550c <MainBALANCE+0x74>
		/* Idle State Operations */
		case BalanceModule_MAINState_IDLE	 : result = BalanceModule.Ops.BalanceModule_IDLE(&BalanceModule.Obj);
 80054d2:	4b13      	ldr	r3, [pc, #76]	; (8005520 <MainBALANCE+0x88>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4812      	ldr	r0, [pc, #72]	; (8005520 <MainBALANCE+0x88>)
 80054d8:	4798      	blx	r3
 80054da:	4603      	mov	r3, r0
 80054dc:	71fb      	strb	r3, [r7, #7]
			break;
 80054de:	e015      	b.n	800550c <MainBALANCE+0x74>
		/* Routine State Operations */
		case BalanceModule_MAINState_ROUTINE : result = BalanceModule.Ops.BalanceModule_ROUTINE(&BalanceModule.Obj);
 80054e0:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <MainBALANCE+0x88>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	480e      	ldr	r0, [pc, #56]	; (8005520 <MainBALANCE+0x88>)
 80054e6:	4798      	blx	r3
 80054e8:	4603      	mov	r3, r0
 80054ea:	71fb      	strb	r3, [r7, #7]
			break;
 80054ec:	e00e      	b.n	800550c <MainBALANCE+0x74>
		/* Process State Operations */
		case BalanceModule_MAINState_PROCESS : result = BalanceModule.Ops.BalanceModule_PROCESS(&BalanceModule.Obj);
 80054ee:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <MainBALANCE+0x88>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	480b      	ldr	r0, [pc, #44]	; (8005520 <MainBALANCE+0x88>)
 80054f4:	4798      	blx	r3
 80054f6:	4603      	mov	r3, r0
 80054f8:	71fb      	strb	r3, [r7, #7]
			break;
 80054fa:	e007      	b.n	800550c <MainBALANCE+0x74>
		/* Suspend State Operations */
		case BalanceModule_MAINState_SUSPEND : result = BalanceModule.Ops.BalanceModule_SUSPEND(&BalanceModule.Obj);
 80054fc:	4b08      	ldr	r3, [pc, #32]	; (8005520 <MainBALANCE+0x88>)
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	4807      	ldr	r0, [pc, #28]	; (8005520 <MainBALANCE+0x88>)
 8005502:	4798      	blx	r3
 8005504:	4603      	mov	r3, r0
 8005506:	71fb      	strb	r3, [r7, #7]
			break;
 8005508:	e000      	b.n	800550c <MainBALANCE+0x74>

		/* Error State Operations */
		default: break;
 800550a:	bf00      	nop
	}

	if( result != BALANCE_EOK) for(;;); /* Infinite Loop until WDT Reset */
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d000      	beq.n	8005514 <MainBALANCE+0x7c>
 8005512:	e7fe      	b.n	8005512 <MainBALANCE+0x7a>

}
 8005514:	bf00      	nop
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	2000050c 	.word	0x2000050c
 8005520:	20000510 	.word	0x20000510

08005524 <MainCAN>:

	return result;
}

void MainCAN(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
	can_err_t result = CAN_EOK;
 800552a:	2300      	movs	r3, #0
 800552c:	71fb      	strb	r3, [r7, #7]

	switch(CanModule_MAINState)
 800552e:	4b1e      	ldr	r3, [pc, #120]	; (80055a8 <MainCAN+0x84>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b04      	cmp	r3, #4
 8005534:	d82f      	bhi.n	8005596 <MainCAN+0x72>
 8005536:	a201      	add	r2, pc, #4	; (adr r2, 800553c <MainCAN+0x18>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	08005551 	.word	0x08005551
 8005540:	0800555f 	.word	0x0800555f
 8005544:	0800556d 	.word	0x0800556d
 8005548:	0800557b 	.word	0x0800557b
 800554c:	08005589 	.word	0x08005589
	{
		/* Init State Operations */
		case CanModule_MAINState_INIT	 	: result = CanModule.Ops.CanModule_INIT		(&CanModule.Obj);
 8005550:	4b16      	ldr	r3, [pc, #88]	; (80055ac <MainCAN+0x88>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4815      	ldr	r0, [pc, #84]	; (80055ac <MainCAN+0x88>)
 8005556:	4798      	blx	r3
 8005558:	4603      	mov	r3, r0
 800555a:	71fb      	strb	r3, [r7, #7]
			break;
 800555c:	e01c      	b.n	8005598 <MainCAN+0x74>
		/* Idle State Operations */
		case CanModule_MAINState_IDLE	 	: result = CanModule.Ops.CanModule_IDLE		(&CanModule.Obj);
 800555e:	4b13      	ldr	r3, [pc, #76]	; (80055ac <MainCAN+0x88>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	4812      	ldr	r0, [pc, #72]	; (80055ac <MainCAN+0x88>)
 8005564:	4798      	blx	r3
 8005566:	4603      	mov	r3, r0
 8005568:	71fb      	strb	r3, [r7, #7]
			break;
 800556a:	e015      	b.n	8005598 <MainCAN+0x74>
		/* Routine State Operations */
		case CanModule_MAINState_ROUTINE	: result = CanModule.Ops.CanModule_ROUTINE	(&CanModule.Obj);
 800556c:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <MainCAN+0x88>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	480e      	ldr	r0, [pc, #56]	; (80055ac <MainCAN+0x88>)
 8005572:	4798      	blx	r3
 8005574:	4603      	mov	r3, r0
 8005576:	71fb      	strb	r3, [r7, #7]
			break;
 8005578:	e00e      	b.n	8005598 <MainCAN+0x74>
		/* Process State Operations */
		case CanModule_MAINState_PROCESS	: result = CanModule.Ops.CanModule_PROCESS	(&CanModule.Obj);
 800557a:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <MainCAN+0x88>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	480b      	ldr	r0, [pc, #44]	; (80055ac <MainCAN+0x88>)
 8005580:	4798      	blx	r3
 8005582:	4603      	mov	r3, r0
 8005584:	71fb      	strb	r3, [r7, #7]
			break;
 8005586:	e007      	b.n	8005598 <MainCAN+0x74>
		/* Suspend State Operations */
		case CanModule_MAINState_SUSPEND	: result = CanModule.Ops.CanModule_SUSPEND	(&CanModule.Obj);
 8005588:	4b08      	ldr	r3, [pc, #32]	; (80055ac <MainCAN+0x88>)
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	4807      	ldr	r0, [pc, #28]	; (80055ac <MainCAN+0x88>)
 800558e:	4798      	blx	r3
 8005590:	4603      	mov	r3, r0
 8005592:	71fb      	strb	r3, [r7, #7]
			break;
 8005594:	e000      	b.n	8005598 <MainCAN+0x74>

		/* Error State Operations */
		default: break;
 8005596:	bf00      	nop
	}

	if( result != CAN_EOK) for(;;); /* Infinite Loop until WDT Reset */
 8005598:	79fb      	ldrb	r3, [r7, #7]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d000      	beq.n	80055a0 <MainCAN+0x7c>
 800559e:	e7fe      	b.n	800559e <MainCAN+0x7a>

}
 80055a0:	bf00      	nop
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20000524 	.word	0x20000524
 80055ac:	20000528 	.word	0x20000528

080055b0 <__errno>:
 80055b0:	4b01      	ldr	r3, [pc, #4]	; (80055b8 <__errno+0x8>)
 80055b2:	6818      	ldr	r0, [r3, #0]
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	2000009c 	.word	0x2000009c

080055bc <__libc_init_array>:
 80055bc:	b570      	push	{r4, r5, r6, lr}
 80055be:	4d0d      	ldr	r5, [pc, #52]	; (80055f4 <__libc_init_array+0x38>)
 80055c0:	4c0d      	ldr	r4, [pc, #52]	; (80055f8 <__libc_init_array+0x3c>)
 80055c2:	1b64      	subs	r4, r4, r5
 80055c4:	10a4      	asrs	r4, r4, #2
 80055c6:	2600      	movs	r6, #0
 80055c8:	42a6      	cmp	r6, r4
 80055ca:	d109      	bne.n	80055e0 <__libc_init_array+0x24>
 80055cc:	4d0b      	ldr	r5, [pc, #44]	; (80055fc <__libc_init_array+0x40>)
 80055ce:	4c0c      	ldr	r4, [pc, #48]	; (8005600 <__libc_init_array+0x44>)
 80055d0:	f000 fc9c 	bl	8005f0c <_init>
 80055d4:	1b64      	subs	r4, r4, r5
 80055d6:	10a4      	asrs	r4, r4, #2
 80055d8:	2600      	movs	r6, #0
 80055da:	42a6      	cmp	r6, r4
 80055dc:	d105      	bne.n	80055ea <__libc_init_array+0x2e>
 80055de:	bd70      	pop	{r4, r5, r6, pc}
 80055e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e4:	4798      	blx	r3
 80055e6:	3601      	adds	r6, #1
 80055e8:	e7ee      	b.n	80055c8 <__libc_init_array+0xc>
 80055ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ee:	4798      	blx	r3
 80055f0:	3601      	adds	r6, #1
 80055f2:	e7f2      	b.n	80055da <__libc_init_array+0x1e>
 80055f4:	08006040 	.word	0x08006040
 80055f8:	08006040 	.word	0x08006040
 80055fc:	08006040 	.word	0x08006040
 8005600:	08006044 	.word	0x08006044

08005604 <malloc>:
 8005604:	4b02      	ldr	r3, [pc, #8]	; (8005610 <malloc+0xc>)
 8005606:	4601      	mov	r1, r0
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	f000 b88d 	b.w	8005728 <_malloc_r>
 800560e:	bf00      	nop
 8005610:	2000009c 	.word	0x2000009c

08005614 <free>:
 8005614:	4b02      	ldr	r3, [pc, #8]	; (8005620 <free+0xc>)
 8005616:	4601      	mov	r1, r0
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	f000 b819 	b.w	8005650 <_free_r>
 800561e:	bf00      	nop
 8005620:	2000009c 	.word	0x2000009c

08005624 <memcpy>:
 8005624:	440a      	add	r2, r1
 8005626:	4291      	cmp	r1, r2
 8005628:	f100 33ff 	add.w	r3, r0, #4294967295
 800562c:	d100      	bne.n	8005630 <memcpy+0xc>
 800562e:	4770      	bx	lr
 8005630:	b510      	push	{r4, lr}
 8005632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005636:	f803 4f01 	strb.w	r4, [r3, #1]!
 800563a:	4291      	cmp	r1, r2
 800563c:	d1f9      	bne.n	8005632 <memcpy+0xe>
 800563e:	bd10      	pop	{r4, pc}

08005640 <memset>:
 8005640:	4402      	add	r2, r0
 8005642:	4603      	mov	r3, r0
 8005644:	4293      	cmp	r3, r2
 8005646:	d100      	bne.n	800564a <memset+0xa>
 8005648:	4770      	bx	lr
 800564a:	f803 1b01 	strb.w	r1, [r3], #1
 800564e:	e7f9      	b.n	8005644 <memset+0x4>

08005650 <_free_r>:
 8005650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005652:	2900      	cmp	r1, #0
 8005654:	d044      	beq.n	80056e0 <_free_r+0x90>
 8005656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800565a:	9001      	str	r0, [sp, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	f1a1 0404 	sub.w	r4, r1, #4
 8005662:	bfb8      	it	lt
 8005664:	18e4      	addlt	r4, r4, r3
 8005666:	f000 fab3 	bl	8005bd0 <__malloc_lock>
 800566a:	4a1e      	ldr	r2, [pc, #120]	; (80056e4 <_free_r+0x94>)
 800566c:	9801      	ldr	r0, [sp, #4]
 800566e:	6813      	ldr	r3, [r2, #0]
 8005670:	b933      	cbnz	r3, 8005680 <_free_r+0x30>
 8005672:	6063      	str	r3, [r4, #4]
 8005674:	6014      	str	r4, [r2, #0]
 8005676:	b003      	add	sp, #12
 8005678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800567c:	f000 baae 	b.w	8005bdc <__malloc_unlock>
 8005680:	42a3      	cmp	r3, r4
 8005682:	d908      	bls.n	8005696 <_free_r+0x46>
 8005684:	6825      	ldr	r5, [r4, #0]
 8005686:	1961      	adds	r1, r4, r5
 8005688:	428b      	cmp	r3, r1
 800568a:	bf01      	itttt	eq
 800568c:	6819      	ldreq	r1, [r3, #0]
 800568e:	685b      	ldreq	r3, [r3, #4]
 8005690:	1949      	addeq	r1, r1, r5
 8005692:	6021      	streq	r1, [r4, #0]
 8005694:	e7ed      	b.n	8005672 <_free_r+0x22>
 8005696:	461a      	mov	r2, r3
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	b10b      	cbz	r3, 80056a0 <_free_r+0x50>
 800569c:	42a3      	cmp	r3, r4
 800569e:	d9fa      	bls.n	8005696 <_free_r+0x46>
 80056a0:	6811      	ldr	r1, [r2, #0]
 80056a2:	1855      	adds	r5, r2, r1
 80056a4:	42a5      	cmp	r5, r4
 80056a6:	d10b      	bne.n	80056c0 <_free_r+0x70>
 80056a8:	6824      	ldr	r4, [r4, #0]
 80056aa:	4421      	add	r1, r4
 80056ac:	1854      	adds	r4, r2, r1
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	6011      	str	r1, [r2, #0]
 80056b2:	d1e0      	bne.n	8005676 <_free_r+0x26>
 80056b4:	681c      	ldr	r4, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	6053      	str	r3, [r2, #4]
 80056ba:	4421      	add	r1, r4
 80056bc:	6011      	str	r1, [r2, #0]
 80056be:	e7da      	b.n	8005676 <_free_r+0x26>
 80056c0:	d902      	bls.n	80056c8 <_free_r+0x78>
 80056c2:	230c      	movs	r3, #12
 80056c4:	6003      	str	r3, [r0, #0]
 80056c6:	e7d6      	b.n	8005676 <_free_r+0x26>
 80056c8:	6825      	ldr	r5, [r4, #0]
 80056ca:	1961      	adds	r1, r4, r5
 80056cc:	428b      	cmp	r3, r1
 80056ce:	bf04      	itt	eq
 80056d0:	6819      	ldreq	r1, [r3, #0]
 80056d2:	685b      	ldreq	r3, [r3, #4]
 80056d4:	6063      	str	r3, [r4, #4]
 80056d6:	bf04      	itt	eq
 80056d8:	1949      	addeq	r1, r1, r5
 80056da:	6021      	streq	r1, [r4, #0]
 80056dc:	6054      	str	r4, [r2, #4]
 80056de:	e7ca      	b.n	8005676 <_free_r+0x26>
 80056e0:	b003      	add	sp, #12
 80056e2:	bd30      	pop	{r4, r5, pc}
 80056e4:	2000053c 	.word	0x2000053c

080056e8 <sbrk_aligned>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	4e0e      	ldr	r6, [pc, #56]	; (8005724 <sbrk_aligned+0x3c>)
 80056ec:	460c      	mov	r4, r1
 80056ee:	6831      	ldr	r1, [r6, #0]
 80056f0:	4605      	mov	r5, r0
 80056f2:	b911      	cbnz	r1, 80056fa <sbrk_aligned+0x12>
 80056f4:	f000 fa20 	bl	8005b38 <_sbrk_r>
 80056f8:	6030      	str	r0, [r6, #0]
 80056fa:	4621      	mov	r1, r4
 80056fc:	4628      	mov	r0, r5
 80056fe:	f000 fa1b 	bl	8005b38 <_sbrk_r>
 8005702:	1c43      	adds	r3, r0, #1
 8005704:	d00a      	beq.n	800571c <sbrk_aligned+0x34>
 8005706:	1cc4      	adds	r4, r0, #3
 8005708:	f024 0403 	bic.w	r4, r4, #3
 800570c:	42a0      	cmp	r0, r4
 800570e:	d007      	beq.n	8005720 <sbrk_aligned+0x38>
 8005710:	1a21      	subs	r1, r4, r0
 8005712:	4628      	mov	r0, r5
 8005714:	f000 fa10 	bl	8005b38 <_sbrk_r>
 8005718:	3001      	adds	r0, #1
 800571a:	d101      	bne.n	8005720 <sbrk_aligned+0x38>
 800571c:	f04f 34ff 	mov.w	r4, #4294967295
 8005720:	4620      	mov	r0, r4
 8005722:	bd70      	pop	{r4, r5, r6, pc}
 8005724:	20000540 	.word	0x20000540

08005728 <_malloc_r>:
 8005728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800572c:	1ccd      	adds	r5, r1, #3
 800572e:	f025 0503 	bic.w	r5, r5, #3
 8005732:	3508      	adds	r5, #8
 8005734:	2d0c      	cmp	r5, #12
 8005736:	bf38      	it	cc
 8005738:	250c      	movcc	r5, #12
 800573a:	2d00      	cmp	r5, #0
 800573c:	4607      	mov	r7, r0
 800573e:	db01      	blt.n	8005744 <_malloc_r+0x1c>
 8005740:	42a9      	cmp	r1, r5
 8005742:	d905      	bls.n	8005750 <_malloc_r+0x28>
 8005744:	230c      	movs	r3, #12
 8005746:	603b      	str	r3, [r7, #0]
 8005748:	2600      	movs	r6, #0
 800574a:	4630      	mov	r0, r6
 800574c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005750:	4e2e      	ldr	r6, [pc, #184]	; (800580c <_malloc_r+0xe4>)
 8005752:	f000 fa3d 	bl	8005bd0 <__malloc_lock>
 8005756:	6833      	ldr	r3, [r6, #0]
 8005758:	461c      	mov	r4, r3
 800575a:	bb34      	cbnz	r4, 80057aa <_malloc_r+0x82>
 800575c:	4629      	mov	r1, r5
 800575e:	4638      	mov	r0, r7
 8005760:	f7ff ffc2 	bl	80056e8 <sbrk_aligned>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	4604      	mov	r4, r0
 8005768:	d14d      	bne.n	8005806 <_malloc_r+0xde>
 800576a:	6834      	ldr	r4, [r6, #0]
 800576c:	4626      	mov	r6, r4
 800576e:	2e00      	cmp	r6, #0
 8005770:	d140      	bne.n	80057f4 <_malloc_r+0xcc>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	4631      	mov	r1, r6
 8005776:	4638      	mov	r0, r7
 8005778:	eb04 0803 	add.w	r8, r4, r3
 800577c:	f000 f9dc 	bl	8005b38 <_sbrk_r>
 8005780:	4580      	cmp	r8, r0
 8005782:	d13a      	bne.n	80057fa <_malloc_r+0xd2>
 8005784:	6821      	ldr	r1, [r4, #0]
 8005786:	3503      	adds	r5, #3
 8005788:	1a6d      	subs	r5, r5, r1
 800578a:	f025 0503 	bic.w	r5, r5, #3
 800578e:	3508      	adds	r5, #8
 8005790:	2d0c      	cmp	r5, #12
 8005792:	bf38      	it	cc
 8005794:	250c      	movcc	r5, #12
 8005796:	4629      	mov	r1, r5
 8005798:	4638      	mov	r0, r7
 800579a:	f7ff ffa5 	bl	80056e8 <sbrk_aligned>
 800579e:	3001      	adds	r0, #1
 80057a0:	d02b      	beq.n	80057fa <_malloc_r+0xd2>
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	442b      	add	r3, r5
 80057a6:	6023      	str	r3, [r4, #0]
 80057a8:	e00e      	b.n	80057c8 <_malloc_r+0xa0>
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	1b52      	subs	r2, r2, r5
 80057ae:	d41e      	bmi.n	80057ee <_malloc_r+0xc6>
 80057b0:	2a0b      	cmp	r2, #11
 80057b2:	d916      	bls.n	80057e2 <_malloc_r+0xba>
 80057b4:	1961      	adds	r1, r4, r5
 80057b6:	42a3      	cmp	r3, r4
 80057b8:	6025      	str	r5, [r4, #0]
 80057ba:	bf18      	it	ne
 80057bc:	6059      	strne	r1, [r3, #4]
 80057be:	6863      	ldr	r3, [r4, #4]
 80057c0:	bf08      	it	eq
 80057c2:	6031      	streq	r1, [r6, #0]
 80057c4:	5162      	str	r2, [r4, r5]
 80057c6:	604b      	str	r3, [r1, #4]
 80057c8:	4638      	mov	r0, r7
 80057ca:	f104 060b 	add.w	r6, r4, #11
 80057ce:	f000 fa05 	bl	8005bdc <__malloc_unlock>
 80057d2:	f026 0607 	bic.w	r6, r6, #7
 80057d6:	1d23      	adds	r3, r4, #4
 80057d8:	1af2      	subs	r2, r6, r3
 80057da:	d0b6      	beq.n	800574a <_malloc_r+0x22>
 80057dc:	1b9b      	subs	r3, r3, r6
 80057de:	50a3      	str	r3, [r4, r2]
 80057e0:	e7b3      	b.n	800574a <_malloc_r+0x22>
 80057e2:	6862      	ldr	r2, [r4, #4]
 80057e4:	42a3      	cmp	r3, r4
 80057e6:	bf0c      	ite	eq
 80057e8:	6032      	streq	r2, [r6, #0]
 80057ea:	605a      	strne	r2, [r3, #4]
 80057ec:	e7ec      	b.n	80057c8 <_malloc_r+0xa0>
 80057ee:	4623      	mov	r3, r4
 80057f0:	6864      	ldr	r4, [r4, #4]
 80057f2:	e7b2      	b.n	800575a <_malloc_r+0x32>
 80057f4:	4634      	mov	r4, r6
 80057f6:	6876      	ldr	r6, [r6, #4]
 80057f8:	e7b9      	b.n	800576e <_malloc_r+0x46>
 80057fa:	230c      	movs	r3, #12
 80057fc:	603b      	str	r3, [r7, #0]
 80057fe:	4638      	mov	r0, r7
 8005800:	f000 f9ec 	bl	8005bdc <__malloc_unlock>
 8005804:	e7a1      	b.n	800574a <_malloc_r+0x22>
 8005806:	6025      	str	r5, [r4, #0]
 8005808:	e7de      	b.n	80057c8 <_malloc_r+0xa0>
 800580a:	bf00      	nop
 800580c:	2000053c 	.word	0x2000053c

08005810 <_printf_common>:
 8005810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005814:	4616      	mov	r6, r2
 8005816:	4699      	mov	r9, r3
 8005818:	688a      	ldr	r2, [r1, #8]
 800581a:	690b      	ldr	r3, [r1, #16]
 800581c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005820:	4293      	cmp	r3, r2
 8005822:	bfb8      	it	lt
 8005824:	4613      	movlt	r3, r2
 8005826:	6033      	str	r3, [r6, #0]
 8005828:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800582c:	4607      	mov	r7, r0
 800582e:	460c      	mov	r4, r1
 8005830:	b10a      	cbz	r2, 8005836 <_printf_common+0x26>
 8005832:	3301      	adds	r3, #1
 8005834:	6033      	str	r3, [r6, #0]
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	0699      	lsls	r1, r3, #26
 800583a:	bf42      	ittt	mi
 800583c:	6833      	ldrmi	r3, [r6, #0]
 800583e:	3302      	addmi	r3, #2
 8005840:	6033      	strmi	r3, [r6, #0]
 8005842:	6825      	ldr	r5, [r4, #0]
 8005844:	f015 0506 	ands.w	r5, r5, #6
 8005848:	d106      	bne.n	8005858 <_printf_common+0x48>
 800584a:	f104 0a19 	add.w	sl, r4, #25
 800584e:	68e3      	ldr	r3, [r4, #12]
 8005850:	6832      	ldr	r2, [r6, #0]
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	42ab      	cmp	r3, r5
 8005856:	dc26      	bgt.n	80058a6 <_printf_common+0x96>
 8005858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800585c:	1e13      	subs	r3, r2, #0
 800585e:	6822      	ldr	r2, [r4, #0]
 8005860:	bf18      	it	ne
 8005862:	2301      	movne	r3, #1
 8005864:	0692      	lsls	r2, r2, #26
 8005866:	d42b      	bmi.n	80058c0 <_printf_common+0xb0>
 8005868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800586c:	4649      	mov	r1, r9
 800586e:	4638      	mov	r0, r7
 8005870:	47c0      	blx	r8
 8005872:	3001      	adds	r0, #1
 8005874:	d01e      	beq.n	80058b4 <_printf_common+0xa4>
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	68e5      	ldr	r5, [r4, #12]
 800587a:	6832      	ldr	r2, [r6, #0]
 800587c:	f003 0306 	and.w	r3, r3, #6
 8005880:	2b04      	cmp	r3, #4
 8005882:	bf08      	it	eq
 8005884:	1aad      	subeq	r5, r5, r2
 8005886:	68a3      	ldr	r3, [r4, #8]
 8005888:	6922      	ldr	r2, [r4, #16]
 800588a:	bf0c      	ite	eq
 800588c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005890:	2500      	movne	r5, #0
 8005892:	4293      	cmp	r3, r2
 8005894:	bfc4      	itt	gt
 8005896:	1a9b      	subgt	r3, r3, r2
 8005898:	18ed      	addgt	r5, r5, r3
 800589a:	2600      	movs	r6, #0
 800589c:	341a      	adds	r4, #26
 800589e:	42b5      	cmp	r5, r6
 80058a0:	d11a      	bne.n	80058d8 <_printf_common+0xc8>
 80058a2:	2000      	movs	r0, #0
 80058a4:	e008      	b.n	80058b8 <_printf_common+0xa8>
 80058a6:	2301      	movs	r3, #1
 80058a8:	4652      	mov	r2, sl
 80058aa:	4649      	mov	r1, r9
 80058ac:	4638      	mov	r0, r7
 80058ae:	47c0      	blx	r8
 80058b0:	3001      	adds	r0, #1
 80058b2:	d103      	bne.n	80058bc <_printf_common+0xac>
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295
 80058b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058bc:	3501      	adds	r5, #1
 80058be:	e7c6      	b.n	800584e <_printf_common+0x3e>
 80058c0:	18e1      	adds	r1, r4, r3
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	2030      	movs	r0, #48	; 0x30
 80058c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ca:	4422      	add	r2, r4
 80058cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058d4:	3302      	adds	r3, #2
 80058d6:	e7c7      	b.n	8005868 <_printf_common+0x58>
 80058d8:	2301      	movs	r3, #1
 80058da:	4622      	mov	r2, r4
 80058dc:	4649      	mov	r1, r9
 80058de:	4638      	mov	r0, r7
 80058e0:	47c0      	blx	r8
 80058e2:	3001      	adds	r0, #1
 80058e4:	d0e6      	beq.n	80058b4 <_printf_common+0xa4>
 80058e6:	3601      	adds	r6, #1
 80058e8:	e7d9      	b.n	800589e <_printf_common+0x8e>
	...

080058ec <_printf_i>:
 80058ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	7e0f      	ldrb	r7, [r1, #24]
 80058f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058f4:	2f78      	cmp	r7, #120	; 0x78
 80058f6:	4691      	mov	r9, r2
 80058f8:	4680      	mov	r8, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	469a      	mov	sl, r3
 80058fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005902:	d807      	bhi.n	8005914 <_printf_i+0x28>
 8005904:	2f62      	cmp	r7, #98	; 0x62
 8005906:	d80a      	bhi.n	800591e <_printf_i+0x32>
 8005908:	2f00      	cmp	r7, #0
 800590a:	f000 80d8 	beq.w	8005abe <_printf_i+0x1d2>
 800590e:	2f58      	cmp	r7, #88	; 0x58
 8005910:	f000 80a3 	beq.w	8005a5a <_printf_i+0x16e>
 8005914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800591c:	e03a      	b.n	8005994 <_printf_i+0xa8>
 800591e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005922:	2b15      	cmp	r3, #21
 8005924:	d8f6      	bhi.n	8005914 <_printf_i+0x28>
 8005926:	a101      	add	r1, pc, #4	; (adr r1, 800592c <_printf_i+0x40>)
 8005928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800592c:	08005985 	.word	0x08005985
 8005930:	08005999 	.word	0x08005999
 8005934:	08005915 	.word	0x08005915
 8005938:	08005915 	.word	0x08005915
 800593c:	08005915 	.word	0x08005915
 8005940:	08005915 	.word	0x08005915
 8005944:	08005999 	.word	0x08005999
 8005948:	08005915 	.word	0x08005915
 800594c:	08005915 	.word	0x08005915
 8005950:	08005915 	.word	0x08005915
 8005954:	08005915 	.word	0x08005915
 8005958:	08005aa5 	.word	0x08005aa5
 800595c:	080059c9 	.word	0x080059c9
 8005960:	08005a87 	.word	0x08005a87
 8005964:	08005915 	.word	0x08005915
 8005968:	08005915 	.word	0x08005915
 800596c:	08005ac7 	.word	0x08005ac7
 8005970:	08005915 	.word	0x08005915
 8005974:	080059c9 	.word	0x080059c9
 8005978:	08005915 	.word	0x08005915
 800597c:	08005915 	.word	0x08005915
 8005980:	08005a8f 	.word	0x08005a8f
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	1d1a      	adds	r2, r3, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	602a      	str	r2, [r5, #0]
 800598c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005994:	2301      	movs	r3, #1
 8005996:	e0a3      	b.n	8005ae0 <_printf_i+0x1f4>
 8005998:	6820      	ldr	r0, [r4, #0]
 800599a:	6829      	ldr	r1, [r5, #0]
 800599c:	0606      	lsls	r6, r0, #24
 800599e:	f101 0304 	add.w	r3, r1, #4
 80059a2:	d50a      	bpl.n	80059ba <_printf_i+0xce>
 80059a4:	680e      	ldr	r6, [r1, #0]
 80059a6:	602b      	str	r3, [r5, #0]
 80059a8:	2e00      	cmp	r6, #0
 80059aa:	da03      	bge.n	80059b4 <_printf_i+0xc8>
 80059ac:	232d      	movs	r3, #45	; 0x2d
 80059ae:	4276      	negs	r6, r6
 80059b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b4:	485e      	ldr	r0, [pc, #376]	; (8005b30 <_printf_i+0x244>)
 80059b6:	230a      	movs	r3, #10
 80059b8:	e019      	b.n	80059ee <_printf_i+0x102>
 80059ba:	680e      	ldr	r6, [r1, #0]
 80059bc:	602b      	str	r3, [r5, #0]
 80059be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059c2:	bf18      	it	ne
 80059c4:	b236      	sxthne	r6, r6
 80059c6:	e7ef      	b.n	80059a8 <_printf_i+0xbc>
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	6820      	ldr	r0, [r4, #0]
 80059cc:	1d19      	adds	r1, r3, #4
 80059ce:	6029      	str	r1, [r5, #0]
 80059d0:	0601      	lsls	r1, r0, #24
 80059d2:	d501      	bpl.n	80059d8 <_printf_i+0xec>
 80059d4:	681e      	ldr	r6, [r3, #0]
 80059d6:	e002      	b.n	80059de <_printf_i+0xf2>
 80059d8:	0646      	lsls	r6, r0, #25
 80059da:	d5fb      	bpl.n	80059d4 <_printf_i+0xe8>
 80059dc:	881e      	ldrh	r6, [r3, #0]
 80059de:	4854      	ldr	r0, [pc, #336]	; (8005b30 <_printf_i+0x244>)
 80059e0:	2f6f      	cmp	r7, #111	; 0x6f
 80059e2:	bf0c      	ite	eq
 80059e4:	2308      	moveq	r3, #8
 80059e6:	230a      	movne	r3, #10
 80059e8:	2100      	movs	r1, #0
 80059ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059ee:	6865      	ldr	r5, [r4, #4]
 80059f0:	60a5      	str	r5, [r4, #8]
 80059f2:	2d00      	cmp	r5, #0
 80059f4:	bfa2      	ittt	ge
 80059f6:	6821      	ldrge	r1, [r4, #0]
 80059f8:	f021 0104 	bicge.w	r1, r1, #4
 80059fc:	6021      	strge	r1, [r4, #0]
 80059fe:	b90e      	cbnz	r6, 8005a04 <_printf_i+0x118>
 8005a00:	2d00      	cmp	r5, #0
 8005a02:	d04d      	beq.n	8005aa0 <_printf_i+0x1b4>
 8005a04:	4615      	mov	r5, r2
 8005a06:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a0a:	fb03 6711 	mls	r7, r3, r1, r6
 8005a0e:	5dc7      	ldrb	r7, [r0, r7]
 8005a10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a14:	4637      	mov	r7, r6
 8005a16:	42bb      	cmp	r3, r7
 8005a18:	460e      	mov	r6, r1
 8005a1a:	d9f4      	bls.n	8005a06 <_printf_i+0x11a>
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d10b      	bne.n	8005a38 <_printf_i+0x14c>
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	07de      	lsls	r6, r3, #31
 8005a24:	d508      	bpl.n	8005a38 <_printf_i+0x14c>
 8005a26:	6923      	ldr	r3, [r4, #16]
 8005a28:	6861      	ldr	r1, [r4, #4]
 8005a2a:	4299      	cmp	r1, r3
 8005a2c:	bfde      	ittt	le
 8005a2e:	2330      	movle	r3, #48	; 0x30
 8005a30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a38:	1b52      	subs	r2, r2, r5
 8005a3a:	6122      	str	r2, [r4, #16]
 8005a3c:	f8cd a000 	str.w	sl, [sp]
 8005a40:	464b      	mov	r3, r9
 8005a42:	aa03      	add	r2, sp, #12
 8005a44:	4621      	mov	r1, r4
 8005a46:	4640      	mov	r0, r8
 8005a48:	f7ff fee2 	bl	8005810 <_printf_common>
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d14c      	bne.n	8005aea <_printf_i+0x1fe>
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295
 8005a54:	b004      	add	sp, #16
 8005a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5a:	4835      	ldr	r0, [pc, #212]	; (8005b30 <_printf_i+0x244>)
 8005a5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a60:	6829      	ldr	r1, [r5, #0]
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a68:	6029      	str	r1, [r5, #0]
 8005a6a:	061d      	lsls	r5, r3, #24
 8005a6c:	d514      	bpl.n	8005a98 <_printf_i+0x1ac>
 8005a6e:	07df      	lsls	r7, r3, #31
 8005a70:	bf44      	itt	mi
 8005a72:	f043 0320 	orrmi.w	r3, r3, #32
 8005a76:	6023      	strmi	r3, [r4, #0]
 8005a78:	b91e      	cbnz	r6, 8005a82 <_printf_i+0x196>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	f023 0320 	bic.w	r3, r3, #32
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	2310      	movs	r3, #16
 8005a84:	e7b0      	b.n	80059e8 <_printf_i+0xfc>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	f043 0320 	orr.w	r3, r3, #32
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	2378      	movs	r3, #120	; 0x78
 8005a90:	4828      	ldr	r0, [pc, #160]	; (8005b34 <_printf_i+0x248>)
 8005a92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a96:	e7e3      	b.n	8005a60 <_printf_i+0x174>
 8005a98:	0659      	lsls	r1, r3, #25
 8005a9a:	bf48      	it	mi
 8005a9c:	b2b6      	uxthmi	r6, r6
 8005a9e:	e7e6      	b.n	8005a6e <_printf_i+0x182>
 8005aa0:	4615      	mov	r5, r2
 8005aa2:	e7bb      	b.n	8005a1c <_printf_i+0x130>
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	6826      	ldr	r6, [r4, #0]
 8005aa8:	6961      	ldr	r1, [r4, #20]
 8005aaa:	1d18      	adds	r0, r3, #4
 8005aac:	6028      	str	r0, [r5, #0]
 8005aae:	0635      	lsls	r5, r6, #24
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	d501      	bpl.n	8005ab8 <_printf_i+0x1cc>
 8005ab4:	6019      	str	r1, [r3, #0]
 8005ab6:	e002      	b.n	8005abe <_printf_i+0x1d2>
 8005ab8:	0670      	lsls	r0, r6, #25
 8005aba:	d5fb      	bpl.n	8005ab4 <_printf_i+0x1c8>
 8005abc:	8019      	strh	r1, [r3, #0]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	6123      	str	r3, [r4, #16]
 8005ac2:	4615      	mov	r5, r2
 8005ac4:	e7ba      	b.n	8005a3c <_printf_i+0x150>
 8005ac6:	682b      	ldr	r3, [r5, #0]
 8005ac8:	1d1a      	adds	r2, r3, #4
 8005aca:	602a      	str	r2, [r5, #0]
 8005acc:	681d      	ldr	r5, [r3, #0]
 8005ace:	6862      	ldr	r2, [r4, #4]
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f7fa fb9c 	bl	8000210 <memchr>
 8005ad8:	b108      	cbz	r0, 8005ade <_printf_i+0x1f2>
 8005ada:	1b40      	subs	r0, r0, r5
 8005adc:	6060      	str	r0, [r4, #4]
 8005ade:	6863      	ldr	r3, [r4, #4]
 8005ae0:	6123      	str	r3, [r4, #16]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ae8:	e7a8      	b.n	8005a3c <_printf_i+0x150>
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	462a      	mov	r2, r5
 8005aee:	4649      	mov	r1, r9
 8005af0:	4640      	mov	r0, r8
 8005af2:	47d0      	blx	sl
 8005af4:	3001      	adds	r0, #1
 8005af6:	d0ab      	beq.n	8005a50 <_printf_i+0x164>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	079b      	lsls	r3, r3, #30
 8005afc:	d413      	bmi.n	8005b26 <_printf_i+0x23a>
 8005afe:	68e0      	ldr	r0, [r4, #12]
 8005b00:	9b03      	ldr	r3, [sp, #12]
 8005b02:	4298      	cmp	r0, r3
 8005b04:	bfb8      	it	lt
 8005b06:	4618      	movlt	r0, r3
 8005b08:	e7a4      	b.n	8005a54 <_printf_i+0x168>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4632      	mov	r2, r6
 8005b0e:	4649      	mov	r1, r9
 8005b10:	4640      	mov	r0, r8
 8005b12:	47d0      	blx	sl
 8005b14:	3001      	adds	r0, #1
 8005b16:	d09b      	beq.n	8005a50 <_printf_i+0x164>
 8005b18:	3501      	adds	r5, #1
 8005b1a:	68e3      	ldr	r3, [r4, #12]
 8005b1c:	9903      	ldr	r1, [sp, #12]
 8005b1e:	1a5b      	subs	r3, r3, r1
 8005b20:	42ab      	cmp	r3, r5
 8005b22:	dcf2      	bgt.n	8005b0a <_printf_i+0x21e>
 8005b24:	e7eb      	b.n	8005afe <_printf_i+0x212>
 8005b26:	2500      	movs	r5, #0
 8005b28:	f104 0619 	add.w	r6, r4, #25
 8005b2c:	e7f5      	b.n	8005b1a <_printf_i+0x22e>
 8005b2e:	bf00      	nop
 8005b30:	08005fa0 	.word	0x08005fa0
 8005b34:	08005fb1 	.word	0x08005fb1

08005b38 <_sbrk_r>:
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	4d06      	ldr	r5, [pc, #24]	; (8005b54 <_sbrk_r+0x1c>)
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4604      	mov	r4, r0
 8005b40:	4608      	mov	r0, r1
 8005b42:	602b      	str	r3, [r5, #0]
 8005b44:	f7fb fafe 	bl	8001144 <_sbrk>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	d102      	bne.n	8005b52 <_sbrk_r+0x1a>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	b103      	cbz	r3, 8005b52 <_sbrk_r+0x1a>
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	bd38      	pop	{r3, r4, r5, pc}
 8005b54:	20000548 	.word	0x20000548

08005b58 <siprintf>:
 8005b58:	b40e      	push	{r1, r2, r3}
 8005b5a:	b500      	push	{lr}
 8005b5c:	b09c      	sub	sp, #112	; 0x70
 8005b5e:	ab1d      	add	r3, sp, #116	; 0x74
 8005b60:	9002      	str	r0, [sp, #8]
 8005b62:	9006      	str	r0, [sp, #24]
 8005b64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b68:	4809      	ldr	r0, [pc, #36]	; (8005b90 <siprintf+0x38>)
 8005b6a:	9107      	str	r1, [sp, #28]
 8005b6c:	9104      	str	r1, [sp, #16]
 8005b6e:	4909      	ldr	r1, [pc, #36]	; (8005b94 <siprintf+0x3c>)
 8005b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b74:	9105      	str	r1, [sp, #20]
 8005b76:	6800      	ldr	r0, [r0, #0]
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	a902      	add	r1, sp, #8
 8005b7c:	f000 f8be 	bl	8005cfc <_svfiprintf_r>
 8005b80:	9b02      	ldr	r3, [sp, #8]
 8005b82:	2200      	movs	r2, #0
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	b01c      	add	sp, #112	; 0x70
 8005b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b8c:	b003      	add	sp, #12
 8005b8e:	4770      	bx	lr
 8005b90:	2000009c 	.word	0x2000009c
 8005b94:	ffff0208 	.word	0xffff0208

08005b98 <__retarget_lock_acquire_recursive>:
 8005b98:	4770      	bx	lr

08005b9a <__retarget_lock_release_recursive>:
 8005b9a:	4770      	bx	lr

08005b9c <memmove>:
 8005b9c:	4288      	cmp	r0, r1
 8005b9e:	b510      	push	{r4, lr}
 8005ba0:	eb01 0402 	add.w	r4, r1, r2
 8005ba4:	d902      	bls.n	8005bac <memmove+0x10>
 8005ba6:	4284      	cmp	r4, r0
 8005ba8:	4623      	mov	r3, r4
 8005baa:	d807      	bhi.n	8005bbc <memmove+0x20>
 8005bac:	1e43      	subs	r3, r0, #1
 8005bae:	42a1      	cmp	r1, r4
 8005bb0:	d008      	beq.n	8005bc4 <memmove+0x28>
 8005bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bba:	e7f8      	b.n	8005bae <memmove+0x12>
 8005bbc:	4402      	add	r2, r0
 8005bbe:	4601      	mov	r1, r0
 8005bc0:	428a      	cmp	r2, r1
 8005bc2:	d100      	bne.n	8005bc6 <memmove+0x2a>
 8005bc4:	bd10      	pop	{r4, pc}
 8005bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bce:	e7f7      	b.n	8005bc0 <memmove+0x24>

08005bd0 <__malloc_lock>:
 8005bd0:	4801      	ldr	r0, [pc, #4]	; (8005bd8 <__malloc_lock+0x8>)
 8005bd2:	f7ff bfe1 	b.w	8005b98 <__retarget_lock_acquire_recursive>
 8005bd6:	bf00      	nop
 8005bd8:	20000544 	.word	0x20000544

08005bdc <__malloc_unlock>:
 8005bdc:	4801      	ldr	r0, [pc, #4]	; (8005be4 <__malloc_unlock+0x8>)
 8005bde:	f7ff bfdc 	b.w	8005b9a <__retarget_lock_release_recursive>
 8005be2:	bf00      	nop
 8005be4:	20000544 	.word	0x20000544

08005be8 <_realloc_r>:
 8005be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bec:	4680      	mov	r8, r0
 8005bee:	4614      	mov	r4, r2
 8005bf0:	460e      	mov	r6, r1
 8005bf2:	b921      	cbnz	r1, 8005bfe <_realloc_r+0x16>
 8005bf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	f7ff bd95 	b.w	8005728 <_malloc_r>
 8005bfe:	b92a      	cbnz	r2, 8005c0c <_realloc_r+0x24>
 8005c00:	f7ff fd26 	bl	8005650 <_free_r>
 8005c04:	4625      	mov	r5, r4
 8005c06:	4628      	mov	r0, r5
 8005c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c0c:	f000 f976 	bl	8005efc <_malloc_usable_size_r>
 8005c10:	4284      	cmp	r4, r0
 8005c12:	4607      	mov	r7, r0
 8005c14:	d802      	bhi.n	8005c1c <_realloc_r+0x34>
 8005c16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c1a:	d812      	bhi.n	8005c42 <_realloc_r+0x5a>
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	4640      	mov	r0, r8
 8005c20:	f7ff fd82 	bl	8005728 <_malloc_r>
 8005c24:	4605      	mov	r5, r0
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d0ed      	beq.n	8005c06 <_realloc_r+0x1e>
 8005c2a:	42bc      	cmp	r4, r7
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	4631      	mov	r1, r6
 8005c30:	bf28      	it	cs
 8005c32:	463a      	movcs	r2, r7
 8005c34:	f7ff fcf6 	bl	8005624 <memcpy>
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	f7ff fd08 	bl	8005650 <_free_r>
 8005c40:	e7e1      	b.n	8005c06 <_realloc_r+0x1e>
 8005c42:	4635      	mov	r5, r6
 8005c44:	e7df      	b.n	8005c06 <_realloc_r+0x1e>

08005c46 <__ssputs_r>:
 8005c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4a:	688e      	ldr	r6, [r1, #8]
 8005c4c:	429e      	cmp	r6, r3
 8005c4e:	4682      	mov	sl, r0
 8005c50:	460c      	mov	r4, r1
 8005c52:	4690      	mov	r8, r2
 8005c54:	461f      	mov	r7, r3
 8005c56:	d838      	bhi.n	8005cca <__ssputs_r+0x84>
 8005c58:	898a      	ldrh	r2, [r1, #12]
 8005c5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c5e:	d032      	beq.n	8005cc6 <__ssputs_r+0x80>
 8005c60:	6825      	ldr	r5, [r4, #0]
 8005c62:	6909      	ldr	r1, [r1, #16]
 8005c64:	eba5 0901 	sub.w	r9, r5, r1
 8005c68:	6965      	ldr	r5, [r4, #20]
 8005c6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c72:	3301      	adds	r3, #1
 8005c74:	444b      	add	r3, r9
 8005c76:	106d      	asrs	r5, r5, #1
 8005c78:	429d      	cmp	r5, r3
 8005c7a:	bf38      	it	cc
 8005c7c:	461d      	movcc	r5, r3
 8005c7e:	0553      	lsls	r3, r2, #21
 8005c80:	d531      	bpl.n	8005ce6 <__ssputs_r+0xa0>
 8005c82:	4629      	mov	r1, r5
 8005c84:	f7ff fd50 	bl	8005728 <_malloc_r>
 8005c88:	4606      	mov	r6, r0
 8005c8a:	b950      	cbnz	r0, 8005ca2 <__ssputs_r+0x5c>
 8005c8c:	230c      	movs	r3, #12
 8005c8e:	f8ca 3000 	str.w	r3, [sl]
 8005c92:	89a3      	ldrh	r3, [r4, #12]
 8005c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c98:	81a3      	strh	r3, [r4, #12]
 8005c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca2:	6921      	ldr	r1, [r4, #16]
 8005ca4:	464a      	mov	r2, r9
 8005ca6:	f7ff fcbd 	bl	8005624 <memcpy>
 8005caa:	89a3      	ldrh	r3, [r4, #12]
 8005cac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb4:	81a3      	strh	r3, [r4, #12]
 8005cb6:	6126      	str	r6, [r4, #16]
 8005cb8:	6165      	str	r5, [r4, #20]
 8005cba:	444e      	add	r6, r9
 8005cbc:	eba5 0509 	sub.w	r5, r5, r9
 8005cc0:	6026      	str	r6, [r4, #0]
 8005cc2:	60a5      	str	r5, [r4, #8]
 8005cc4:	463e      	mov	r6, r7
 8005cc6:	42be      	cmp	r6, r7
 8005cc8:	d900      	bls.n	8005ccc <__ssputs_r+0x86>
 8005cca:	463e      	mov	r6, r7
 8005ccc:	6820      	ldr	r0, [r4, #0]
 8005cce:	4632      	mov	r2, r6
 8005cd0:	4641      	mov	r1, r8
 8005cd2:	f7ff ff63 	bl	8005b9c <memmove>
 8005cd6:	68a3      	ldr	r3, [r4, #8]
 8005cd8:	1b9b      	subs	r3, r3, r6
 8005cda:	60a3      	str	r3, [r4, #8]
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	4433      	add	r3, r6
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	e7db      	b.n	8005c9e <__ssputs_r+0x58>
 8005ce6:	462a      	mov	r2, r5
 8005ce8:	f7ff ff7e 	bl	8005be8 <_realloc_r>
 8005cec:	4606      	mov	r6, r0
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d1e1      	bne.n	8005cb6 <__ssputs_r+0x70>
 8005cf2:	6921      	ldr	r1, [r4, #16]
 8005cf4:	4650      	mov	r0, sl
 8005cf6:	f7ff fcab 	bl	8005650 <_free_r>
 8005cfa:	e7c7      	b.n	8005c8c <__ssputs_r+0x46>

08005cfc <_svfiprintf_r>:
 8005cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d00:	4698      	mov	r8, r3
 8005d02:	898b      	ldrh	r3, [r1, #12]
 8005d04:	061b      	lsls	r3, r3, #24
 8005d06:	b09d      	sub	sp, #116	; 0x74
 8005d08:	4607      	mov	r7, r0
 8005d0a:	460d      	mov	r5, r1
 8005d0c:	4614      	mov	r4, r2
 8005d0e:	d50e      	bpl.n	8005d2e <_svfiprintf_r+0x32>
 8005d10:	690b      	ldr	r3, [r1, #16]
 8005d12:	b963      	cbnz	r3, 8005d2e <_svfiprintf_r+0x32>
 8005d14:	2140      	movs	r1, #64	; 0x40
 8005d16:	f7ff fd07 	bl	8005728 <_malloc_r>
 8005d1a:	6028      	str	r0, [r5, #0]
 8005d1c:	6128      	str	r0, [r5, #16]
 8005d1e:	b920      	cbnz	r0, 8005d2a <_svfiprintf_r+0x2e>
 8005d20:	230c      	movs	r3, #12
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295
 8005d28:	e0d1      	b.n	8005ece <_svfiprintf_r+0x1d2>
 8005d2a:	2340      	movs	r3, #64	; 0x40
 8005d2c:	616b      	str	r3, [r5, #20]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	9309      	str	r3, [sp, #36]	; 0x24
 8005d32:	2320      	movs	r3, #32
 8005d34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d38:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d3c:	2330      	movs	r3, #48	; 0x30
 8005d3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ee8 <_svfiprintf_r+0x1ec>
 8005d42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d46:	f04f 0901 	mov.w	r9, #1
 8005d4a:	4623      	mov	r3, r4
 8005d4c:	469a      	mov	sl, r3
 8005d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d52:	b10a      	cbz	r2, 8005d58 <_svfiprintf_r+0x5c>
 8005d54:	2a25      	cmp	r2, #37	; 0x25
 8005d56:	d1f9      	bne.n	8005d4c <_svfiprintf_r+0x50>
 8005d58:	ebba 0b04 	subs.w	fp, sl, r4
 8005d5c:	d00b      	beq.n	8005d76 <_svfiprintf_r+0x7a>
 8005d5e:	465b      	mov	r3, fp
 8005d60:	4622      	mov	r2, r4
 8005d62:	4629      	mov	r1, r5
 8005d64:	4638      	mov	r0, r7
 8005d66:	f7ff ff6e 	bl	8005c46 <__ssputs_r>
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	f000 80aa 	beq.w	8005ec4 <_svfiprintf_r+0x1c8>
 8005d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d72:	445a      	add	r2, fp
 8005d74:	9209      	str	r2, [sp, #36]	; 0x24
 8005d76:	f89a 3000 	ldrb.w	r3, [sl]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 80a2 	beq.w	8005ec4 <_svfiprintf_r+0x1c8>
 8005d80:	2300      	movs	r3, #0
 8005d82:	f04f 32ff 	mov.w	r2, #4294967295
 8005d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d8a:	f10a 0a01 	add.w	sl, sl, #1
 8005d8e:	9304      	str	r3, [sp, #16]
 8005d90:	9307      	str	r3, [sp, #28]
 8005d92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d96:	931a      	str	r3, [sp, #104]	; 0x68
 8005d98:	4654      	mov	r4, sl
 8005d9a:	2205      	movs	r2, #5
 8005d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da0:	4851      	ldr	r0, [pc, #324]	; (8005ee8 <_svfiprintf_r+0x1ec>)
 8005da2:	f7fa fa35 	bl	8000210 <memchr>
 8005da6:	9a04      	ldr	r2, [sp, #16]
 8005da8:	b9d8      	cbnz	r0, 8005de2 <_svfiprintf_r+0xe6>
 8005daa:	06d0      	lsls	r0, r2, #27
 8005dac:	bf44      	itt	mi
 8005dae:	2320      	movmi	r3, #32
 8005db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005db4:	0711      	lsls	r1, r2, #28
 8005db6:	bf44      	itt	mi
 8005db8:	232b      	movmi	r3, #43	; 0x2b
 8005dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8005dc4:	d015      	beq.n	8005df2 <_svfiprintf_r+0xf6>
 8005dc6:	9a07      	ldr	r2, [sp, #28]
 8005dc8:	4654      	mov	r4, sl
 8005dca:	2000      	movs	r0, #0
 8005dcc:	f04f 0c0a 	mov.w	ip, #10
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dd6:	3b30      	subs	r3, #48	; 0x30
 8005dd8:	2b09      	cmp	r3, #9
 8005dda:	d94e      	bls.n	8005e7a <_svfiprintf_r+0x17e>
 8005ddc:	b1b0      	cbz	r0, 8005e0c <_svfiprintf_r+0x110>
 8005dde:	9207      	str	r2, [sp, #28]
 8005de0:	e014      	b.n	8005e0c <_svfiprintf_r+0x110>
 8005de2:	eba0 0308 	sub.w	r3, r0, r8
 8005de6:	fa09 f303 	lsl.w	r3, r9, r3
 8005dea:	4313      	orrs	r3, r2
 8005dec:	9304      	str	r3, [sp, #16]
 8005dee:	46a2      	mov	sl, r4
 8005df0:	e7d2      	b.n	8005d98 <_svfiprintf_r+0x9c>
 8005df2:	9b03      	ldr	r3, [sp, #12]
 8005df4:	1d19      	adds	r1, r3, #4
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	9103      	str	r1, [sp, #12]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	bfbb      	ittet	lt
 8005dfe:	425b      	neglt	r3, r3
 8005e00:	f042 0202 	orrlt.w	r2, r2, #2
 8005e04:	9307      	strge	r3, [sp, #28]
 8005e06:	9307      	strlt	r3, [sp, #28]
 8005e08:	bfb8      	it	lt
 8005e0a:	9204      	strlt	r2, [sp, #16]
 8005e0c:	7823      	ldrb	r3, [r4, #0]
 8005e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8005e10:	d10c      	bne.n	8005e2c <_svfiprintf_r+0x130>
 8005e12:	7863      	ldrb	r3, [r4, #1]
 8005e14:	2b2a      	cmp	r3, #42	; 0x2a
 8005e16:	d135      	bne.n	8005e84 <_svfiprintf_r+0x188>
 8005e18:	9b03      	ldr	r3, [sp, #12]
 8005e1a:	1d1a      	adds	r2, r3, #4
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	9203      	str	r2, [sp, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bfb8      	it	lt
 8005e24:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e28:	3402      	adds	r4, #2
 8005e2a:	9305      	str	r3, [sp, #20]
 8005e2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ef8 <_svfiprintf_r+0x1fc>
 8005e30:	7821      	ldrb	r1, [r4, #0]
 8005e32:	2203      	movs	r2, #3
 8005e34:	4650      	mov	r0, sl
 8005e36:	f7fa f9eb 	bl	8000210 <memchr>
 8005e3a:	b140      	cbz	r0, 8005e4e <_svfiprintf_r+0x152>
 8005e3c:	2340      	movs	r3, #64	; 0x40
 8005e3e:	eba0 000a 	sub.w	r0, r0, sl
 8005e42:	fa03 f000 	lsl.w	r0, r3, r0
 8005e46:	9b04      	ldr	r3, [sp, #16]
 8005e48:	4303      	orrs	r3, r0
 8005e4a:	3401      	adds	r4, #1
 8005e4c:	9304      	str	r3, [sp, #16]
 8005e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e52:	4826      	ldr	r0, [pc, #152]	; (8005eec <_svfiprintf_r+0x1f0>)
 8005e54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e58:	2206      	movs	r2, #6
 8005e5a:	f7fa f9d9 	bl	8000210 <memchr>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	d038      	beq.n	8005ed4 <_svfiprintf_r+0x1d8>
 8005e62:	4b23      	ldr	r3, [pc, #140]	; (8005ef0 <_svfiprintf_r+0x1f4>)
 8005e64:	bb1b      	cbnz	r3, 8005eae <_svfiprintf_r+0x1b2>
 8005e66:	9b03      	ldr	r3, [sp, #12]
 8005e68:	3307      	adds	r3, #7
 8005e6a:	f023 0307 	bic.w	r3, r3, #7
 8005e6e:	3308      	adds	r3, #8
 8005e70:	9303      	str	r3, [sp, #12]
 8005e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e74:	4433      	add	r3, r6
 8005e76:	9309      	str	r3, [sp, #36]	; 0x24
 8005e78:	e767      	b.n	8005d4a <_svfiprintf_r+0x4e>
 8005e7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e7e:	460c      	mov	r4, r1
 8005e80:	2001      	movs	r0, #1
 8005e82:	e7a5      	b.n	8005dd0 <_svfiprintf_r+0xd4>
 8005e84:	2300      	movs	r3, #0
 8005e86:	3401      	adds	r4, #1
 8005e88:	9305      	str	r3, [sp, #20]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	f04f 0c0a 	mov.w	ip, #10
 8005e90:	4620      	mov	r0, r4
 8005e92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e96:	3a30      	subs	r2, #48	; 0x30
 8005e98:	2a09      	cmp	r2, #9
 8005e9a:	d903      	bls.n	8005ea4 <_svfiprintf_r+0x1a8>
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0c5      	beq.n	8005e2c <_svfiprintf_r+0x130>
 8005ea0:	9105      	str	r1, [sp, #20]
 8005ea2:	e7c3      	b.n	8005e2c <_svfiprintf_r+0x130>
 8005ea4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e7f0      	b.n	8005e90 <_svfiprintf_r+0x194>
 8005eae:	ab03      	add	r3, sp, #12
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	462a      	mov	r2, r5
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <_svfiprintf_r+0x1f8>)
 8005eb6:	a904      	add	r1, sp, #16
 8005eb8:	4638      	mov	r0, r7
 8005eba:	f3af 8000 	nop.w
 8005ebe:	1c42      	adds	r2, r0, #1
 8005ec0:	4606      	mov	r6, r0
 8005ec2:	d1d6      	bne.n	8005e72 <_svfiprintf_r+0x176>
 8005ec4:	89ab      	ldrh	r3, [r5, #12]
 8005ec6:	065b      	lsls	r3, r3, #25
 8005ec8:	f53f af2c 	bmi.w	8005d24 <_svfiprintf_r+0x28>
 8005ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ece:	b01d      	add	sp, #116	; 0x74
 8005ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed4:	ab03      	add	r3, sp, #12
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	462a      	mov	r2, r5
 8005eda:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <_svfiprintf_r+0x1f8>)
 8005edc:	a904      	add	r1, sp, #16
 8005ede:	4638      	mov	r0, r7
 8005ee0:	f7ff fd04 	bl	80058ec <_printf_i>
 8005ee4:	e7eb      	b.n	8005ebe <_svfiprintf_r+0x1c2>
 8005ee6:	bf00      	nop
 8005ee8:	08006024 	.word	0x08006024
 8005eec:	0800602e 	.word	0x0800602e
 8005ef0:	00000000 	.word	0x00000000
 8005ef4:	08005c47 	.word	0x08005c47
 8005ef8:	0800602a 	.word	0x0800602a

08005efc <_malloc_usable_size_r>:
 8005efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f00:	1f18      	subs	r0, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	bfbc      	itt	lt
 8005f06:	580b      	ldrlt	r3, [r1, r0]
 8005f08:	18c0      	addlt	r0, r0, r3
 8005f0a:	4770      	bx	lr

08005f0c <_init>:
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0e:	bf00      	nop
 8005f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f12:	bc08      	pop	{r3}
 8005f14:	469e      	mov	lr, r3
 8005f16:	4770      	bx	lr

08005f18 <_fini>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	bf00      	nop
 8005f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1e:	bc08      	pop	{r3}
 8005f20:	469e      	mov	lr, r3
 8005f22:	4770      	bx	lr
